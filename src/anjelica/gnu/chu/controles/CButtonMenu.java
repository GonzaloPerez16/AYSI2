
/**
 *
 * <p>Titulo: CButtonMenu </p>
 * <p>Descripción: Boton que despliega un menu para tener varias opciones</p>
 * <p>Copyright: Copyright (c) 2005-2010
 *  Este programa es software libre. Puede redistribuirlo y/o modificarlo bajo
 *  los terminos de la Licencia Pública General de GNU según es publicada por
 *  la Free Software Foundation, bien de la versión 2 de dicha Licencia
 *  o bien (según su elección) de cualquier versión posterior.
 *  Este programa se distribuye con la esperanza de que sea útil,ed
 *  pero SIN NINGUNA GARANTIA, incluso sin la garantía MERCANTIL implícita
 *  o sin garantizar la CONVENIENCIA PARA UN PROPOSITO PARTICULAR.
 *  Véase la Licencia Pública General de GNU para más detalles.
 *  Debería haber recibido una copia de la Licencia Pública General junto con este programa.
 *  Si no ha sido así, escriba a la Free Software Foundation, Inc.,
 *  en 675 Mass Ave, Cambridge, MA 02139, EEUU.
 * </p>
 * Usar addMenu(String textoMenu) para ir añadiendo menus
 * Cuando llame al ActionPerformed en el ActionEvent en la funcion actionCommand devolvera el
 * string con dado en addMenu.
 * @author chuchiP
 *
 *
 * Created on 20-jun-2009, 10:10:48
 */

package gnu.chu.controles;

import gnu.chu.utilidades.Iconos;
import java.awt.Color;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;


public class CButtonMenu extends CPanel {
    private String menuPrincipal=null;
    int numMenu=0;
    private JPopupMenu Mprinc=new JPopupMenu();
    private ImageIcon icono=null;
    private Vector actionListenerList = new Vector();
 
    public CButtonMenu(ImageIcon icono) {
        this.icono=icono;
        initComponents();
        if (icono!=null)
            Baccion.setIcon(icono);
        afterInicia();
        
    }
    /** Creates new form CButtonMenu */
    public CButtonMenu() {
       initComponents();
       afterInicia();

    }
    private void afterInicia()
    {
        Baccion.setBorder(BorderFactory.createRaisedBevelBorder());
        Bmenu.setIcon(Iconos.getImageIcon("flechaabajo") );
        Bmenu.setToolTipText("Despliega otras opciones sobre este menu");
        Bmenu.setBorder(null);
        Bmenu.setContentAreaFilled(false);
        this.setBorder(BorderFactory.createLineBorder(Color.BLUE));
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        Baccion = new gnu.chu.controles.CButton();
        Bmenu = new gnu.chu.controles.CButton();

        setLayout(new java.awt.GridBagLayout());

        Baccion.setMargin(new java.awt.Insets(0, 0, 0, 0));
        Baccion.setMaximumSize(new java.awt.Dimension(24, 24));
        Baccion.setMinimumSize(new java.awt.Dimension(24, 24));
        Baccion.setPreferredSize(new java.awt.Dimension(24, 24));
        Baccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BaccionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(Baccion, gridBagConstraints);

        Bmenu.setMargin(new java.awt.Insets(0, 0, 0, 0));
        Bmenu.setMaximumSize(new java.awt.Dimension(16, 24));
        Bmenu.setMinimumSize(new java.awt.Dimension(16, 24));
        Bmenu.setPreferredSize(new java.awt.Dimension(16, 24));
        Bmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BmenuActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        add(Bmenu, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    public void setIcon(ImageIcon icono)
    {
        this.icono=icono;
        Baccion.setIcon(icono);
    }

    public void setMargin(Insets in)
    {
        if (Baccion!=null)
            Baccion.setMargin(in);
    }

    @Override
    public void setText(String texto)
    {
        Baccion.setText(texto);
    }
    @Override
    public void setToolTipText(String texto)
    {
        Baccion.setToolTipText(texto);
    }
    private void BaccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BaccionActionPerformed
        ActionEvent ev=new ActionEvent(evt, -1, menuPrincipal==null?"CButton":menuPrincipal);
        processActionPerformed(ev);
    }//GEN-LAST:event_BaccionActionPerformed

    private void BmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BmenuActionPerformed

       Mprinc.show( Baccion,0,Baccion.getSize().height);   
    }//GEN-LAST:event_BmenuActionPerformed
    public void addActionListener(ActionListener e)
    {
        actionListenerList.add(e);
    }
    public void addMenu(final String textoMenu)
    {
        if (menuPrincipal==null)
            menuPrincipal=textoMenu;
        JMenuItem menuItem=new JMenuItem();
        menuItem.setText(textoMenu);
        menuItem.setName(textoMenu);

        menuItem.addActionListener(new miAccionListener(this,numMenu,textoMenu));
        numMenu++;
        Mprinc.add(menuItem);
    }
    public void menuActionPerformed(ActionEvent e,int numMenu,String menu)
    {
         ActionEvent ev=new ActionEvent(e, numMenu, menu);
         processActionPerformed(ev) ;
    }
    
    protected void processActionPerformed(ActionEvent ev) {
        if (!Baccion.isEnabled()) {
            return;
        }

        for (int i = 0; i < actionListenerList.size(); i++) {
            ((ActionListener) actionListenerList.elementAt(i)).actionPerformed(ev);
        }
    }
    public CButton getBotonAccion()
    {
        return Baccion;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private gnu.chu.controles.CButton Baccion;
    private gnu.chu.controles.CButton Bmenu;
    // End of variables declaration//GEN-END:variables

}
class miAccionListener implements ActionListener
{
  int numMenu;
  String textoMenu;
  CButtonMenu papa;
  public miAccionListener(CButtonMenu papa,int numMenu, String textoMenu )
  {
    this.papa=papa;
    this.numMenu=numMenu;
    this.textoMenu=textoMenu;
  }
  public void actionPerformed(ActionEvent e)
  {
      papa.menuActionPerformed(e,numMenu,textoMenu);
  }
}