/**
 *
 * <p>Titulo: MantRepres  </p>
 * <p>Descripción: Mantenimiento Representantes</p>
 * <p>Copyright: Copyright (c) 2005-2010
 *  Este programa es software libre. Puede redistribuirlo y/o modificarlo bajo
 *  los terminos de la Licencia P�blica General de GNU seg�n es publicada por
 *  la Free Software Foundation, bien de la versión 2 de dicha Licencia
 *  o bien (según su elección) de cualquier versión posterior.
 *  Este programa se distribuye con la esperanza de que sea útil,
 *  pero SIN NINGUNA GARANTIA, incluso sin la garantía MERCANTIL implícita
 *  o sin garantizar la CONVENIENCIA PARA UN PROPOSITO PARTICULAR.
 *  Véase la Licencia Pública General de GNU para más detalles.
 *  Debería haber recibido una copia de la Licencia Pública General junto con este programa.
 *  Si no ha sido así, escriba a la Free Software Foundation, Inc.,
 *  en 675 Mass Ave, Cambridge, MA 02139, EEUU.
 * </p>
 * @author chuchiP
 * @version 1.0 Realizado el mantenimiento.
 *
 */
package gnu.chu.anjelica.pad;

import gnu.chu.Menu.Principal;
import gnu.chu.controles.CLinkBox;
import gnu.chu.controles.StatusBar;
import gnu.chu.interfaces.PAD;
import gnu.chu.sql.DatosTabla;
import gnu.chu.utilidades.EntornoUsuario;
import gnu.chu.utilidades.navegador;
import gnu.chu.utilidades.ventanaPad;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.net.UnknownHostException;
import java.sql.SQLException;
import java.sql.Types;
import java.text.ParseException;
import java.util.Hashtable;
import java.util.Vector;

public class MantRepres extends  ventanaPad  implements PAD {
  String s;
  boolean modConsulta = false;
  public MantRepres(EntornoUsuario eu, Principal p)
  {
   this(eu, p, null);
  }

 public MantRepres(EntornoUsuario eu, Principal p,Hashtable ht)
 {
   EU = eu;
   vl = p.panel1;
   jf = p;
   eje = true;

   try
   {
     if (ht != null)
     {
       if (ht.get("modConsulta") != null)
         modConsulta = Boolean.valueOf(ht.get("modConsulta").toString()).
             booleanValue();
     }
      setTitulo("Mant. Representantes");
     if (jf.gestor.apuntar(this))
       jbInit();
     else
       setErrorInit(true);
   }
   catch (Exception e)
   {
    ErrorInit(e);
   }
 }

    public MantRepres(gnu.chu.anjelica.menu p, EntornoUsuario eu, Hashtable ht) {
        EU = eu;
        vl = p.getLayeredPane();
        eje = false;

        try {
            if (ht != null) {
                if (ht.get("modConsulta") != null) {
                    modConsulta = Boolean.valueOf(ht.get("modConsulta").toString()).
                            booleanValue();
                }
            }
            setTitulo("Mant. Representantes");


            jbInit();
        } catch (Exception e) {
           ErrorInit(e);
        }
    }

    private void jbInit() throws Exception {
        statusBar = new StatusBar(this);
        nav = new navegador(this, dtCons, false, modConsulta ? navegador.CURYCON : navegador.NORMAL);
        iniciarFrame();
//        this.setResizable(false);

        this.setVersion("2010-11-10" + (modConsulta ? "SOLO LECTURA" : ""));
        strSql = "SELECT * FROM represent "+
                " ORDER BY rep_codi";

        this.getContentPane().add(nav, BorderLayout.NORTH);
        this.getContentPane().add(statusBar, BorderLayout.SOUTH);
        this.setPad(this);
        dtCons.setLanzaDBCambio(false);
        initComponents();
        iniciarBotones(Baceptar, Bcancelar);

        conecta();
        navActivarAll();
        this.setSize(562,364);
        activar(false);

    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        zon_codiE = new gnu.chu.controles.CTextField(Types.CHAR,"X",4);
        zon_nombE = new gnu.chu.controles.CTextField(Types.CHAR,"X",50);
        sbe_codiE = new gnu.chu.controles.CTextField(Types.DECIMAL,"###9");
        sbe_nombE = new gnu.chu.controles.CTextField(Types.CHAR,"X",50);
        tar_codiE = new gnu.chu.controles.CTextField(Types.DECIMAL,"###9");
        tar_nombE = new gnu.chu.controles.CTextField(Types.CHAR,"X",50);
        Pprinc = new gnu.chu.controles.CPanel();
        Pcabe = new gnu.chu.controles.CPanel();
        rep_codiL = new gnu.chu.controles.CLabel();
        rep_codiE = new gnu.chu.controles.CTextField(Types.CHAR,"X",4);
        rep_nombE = new gnu.chu.controles.CTextField(Types.CHAR,"X",45);
        Baceptar = new gnu.chu.controles.CButton();
        Bcancelar = new gnu.chu.controles.CButton();
        cTabbedPane1 = new gnu.chu.controles.CTabbedPane();
        Pdatos = new gnu.chu.controles.CPanel();
        cLabel20 = new gnu.chu.controles.CLabel();
        cLabel21 = new gnu.chu.controles.CLabel();
        cLabel22 = new gnu.chu.controles.CLabel();
        cLabel23 = new gnu.chu.controles.CLabel();
        rep_codpoE = new gnu.chu.controles.CTextField(Types.DECIMAL,"####9");
        rep_direcE = new gnu.chu.controles.CTextField(Types.CHAR,"X",50);
        cue_codiE = new gnu.chu.controles.CTextField(Types.CHAR,"X",15);
        cLabel24 = new gnu.chu.controles.CLabel();
        rep_poblE = new gnu.chu.controles.CTextField(Types.CHAR,"X",30);
        cLabel25 = new gnu.chu.controles.CLabel();
        rep_telefE = new gnu.chu.controles.CTextField(Types.CHAR,"X",15);
        cLabel26 = new gnu.chu.controles.CLabel();
        rep_faxE = new gnu.chu.controles.CTextField(Types.CHAR,"X",15);
        rep_nifE = new gnu.chu.controles.CTextField(Types.CHAR,"X",15);
        cLabel27 = new gnu.chu.controles.CLabel();
        rep_emailE = new gnu.chu.controles.CTextField(Types.CHAR,"X",15);
        Pzona = new gnu.chu.controles.CPanel();
        jtZon = new gnu.chu.controles.CGridEditable(2) {
            protected void cambiaColumna(int col,int colNueva,int row)
            {
                cambiaColZon(col,row);
            }
            public int cambiaLinea(int row, int col){
                return cambiaLinZon();
            }
        }
        ;
        {
            Vector v=new Vector();
            v.add("Zona");
            v.add("Nombre");
            jtZon.setCabecera(v);
            jtZon.setAnchoColumna(new int[]{50,200});
            jtZon.setAlinearColumna(new int[]{0,0});
            Vector vc=new Vector();
            vc.add(zon_codiE);
            vc.add(zon_nombE);
            try {
                jtZon.setCampos(vc); } catch (Exception k)
            {
                Error("Error al iniciar grid",k);
                return;
            }
            jtZon.setAjustarGrid(true); }
        Pseccion = new gnu.chu.controles.CPanel();
        jtSbe = new gnu.chu.controles.CGridEditable(2){
            protected void cambiaColumna(int col,int colNueva,int row)
            {
                cambiaColSbe(col,row);
            }
            public int cambiaLinea(int row, int col){
                return cambiaLinSbe();
            }
        };
        {
            Vector v=new Vector();
            v.add("Seccion");
            v.add("Nombre");
            jtSbe.setCabecera(v);
            jtSbe.setAnchoColumna(new int[]{80,200});
            jtSbe.setAlinearColumna(new int[]{2,0});
            Vector vc=new Vector();
            vc.add(sbe_codiE);
            vc.add(sbe_nombE);
            try {
                jtSbe.setCampos(vc);} catch (Exception k)
            {
                Error("Error al iniciar grid",k);
                return;
            }

            jtSbe.setAjustarGrid(true);}
        Ptarifa = new gnu.chu.controles.CPanel();
        jtTar = new gnu.chu.controles.CGridEditable(2){
            protected void cambiaColumna(int col,int colNueva,int row)
            {
                cambiaColTar(col,row);
            }
            public int cambiaLinea(int row, int col){
                return cambiaLinTar();
            }
        };
        {
            Vector v=new Vector();
            v.add("Tarifa");
            v.add("Nombre");
            jtTar.setCabecera(v);
            jtTar.setAnchoColumna(new int[]{80,200});
            jtTar.setAlinearColumna(new int[]{2,0});
            Vector vc=new Vector();
            vc.add(tar_codiE);
            vc.add(tar_nombE);
            try {
                jtTar.setCampos(vc);} catch (Exception k)
            {
                Error("Error al iniciar grid",k);
                return;
            }
            jtTar.setAjustarGrid(true);

            zon_nombE.setEnabled(false);

            sbe_nombE.setEnabled(false);

            tar_nombE.setEnabled(false);

            Pcabe.setBorder(javax.swing.BorderFactory.createEtchedBorder());

            rep_codiL.setText("Representante");

            org.jdesktop.layout.GroupLayout PcabeLayout = new org.jdesktop.layout.GroupLayout(Pcabe);
            Pcabe.setLayout(PcabeLayout);
            PcabeLayout.setHorizontalGroup(
                PcabeLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(PcabeLayout.createSequentialGroup()
                    .addContainerGap()
                    .add(rep_codiL, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(rep_codiE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(rep_nombE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 318, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(22, Short.MAX_VALUE))
            );
            PcabeLayout.setVerticalGroup(
                PcabeLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(PcabeLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rep_codiL, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rep_codiE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rep_nombE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            );

            Baceptar.setText("Aceptar");

            Bcancelar.setText("Cancelar");

            Pdatos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

            cLabel20.setText("Cuenta Contable");

            cLabel21.setText("Dirección");

            cLabel22.setText("Codigo Postal");

            cLabel23.setText("NIF");

            cLabel24.setText("Población");

            cLabel25.setText("Telefono");

            cLabel26.setText("Fax");

            cLabel27.setText("Correo Electr.");

            org.jdesktop.layout.GroupLayout PdatosLayout = new org.jdesktop.layout.GroupLayout(Pdatos);
            Pdatos.setLayout(PdatosLayout);
            PdatosLayout.setHorizontalGroup(
                PdatosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(PdatosLayout.createSequentialGroup()
                    .addContainerGap()
                    .add(PdatosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(PdatosLayout.createSequentialGroup()
                            .add(PdatosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(PdatosLayout.createSequentialGroup()
                                    .add(PdatosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, cLabel21, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, cLabel20, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(PdatosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(PdatosLayout.createSequentialGroup()
                                            .add(cue_codiE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 88, Short.MAX_VALUE)
                                            .add(cLabel23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(18, 18, 18)
                                            .add(rep_nifE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .add(rep_direcE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 392, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                .add(PdatosLayout.createSequentialGroup()
                                    .add(cLabel24, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(rep_poblE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 251, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(141, 141, 141)))
                            .add(110, 110, 110))
                        .add(PdatosLayout.createSequentialGroup()
                            .add(cLabel22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(18, 18, 18)
                            .add(rep_codpoE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap(358, Short.MAX_VALUE))
                        .add(PdatosLayout.createSequentialGroup()
                            .add(cLabel25, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(rep_telefE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(342, 342, 342))
                        .add(PdatosLayout.createSequentialGroup()
                            .add(cLabel26, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(rep_faxE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(342, 342, 342))
                        .add(PdatosLayout.createSequentialGroup()
                            .add(cLabel27, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(rep_emailE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 213, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(289, 289, 289))))
            );
            PdatosLayout.setVerticalGroup(
                PdatosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(PdatosLayout.createSequentialGroup()
                    .addContainerGap()
                    .add(PdatosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(cLabel20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(cue_codiE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(cLabel23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(rep_nifE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(PdatosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(cLabel21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(rep_direcE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(PdatosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(cLabel24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(rep_poblE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(PdatosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(cLabel22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(rep_codpoE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(PdatosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(cLabel25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(rep_telefE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(3, 3, 3)
                    .add(PdatosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(cLabel26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(rep_faxE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(PdatosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(cLabel27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(rep_emailE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(17, Short.MAX_VALUE))
            );

            cTabbedPane1.addTab("Datos", Pdatos);

            Pzona.setLayout(new java.awt.BorderLayout());

            org.jdesktop.layout.GroupLayout jtZonLayout = new org.jdesktop.layout.GroupLayout(jtZon);
            jtZon.setLayout(jtZonLayout);
            jtZonLayout.setHorizontalGroup(
                jtZonLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(0, 513, Short.MAX_VALUE)
            );
            jtZonLayout.setVerticalGroup(
                jtZonLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(0, 182, Short.MAX_VALUE)
            );

            Pzona.add(jtZon, java.awt.BorderLayout.CENTER);

            cTabbedPane1.addTab("Zonas", Pzona);

            Pseccion.setLayout(new java.awt.BorderLayout());

            org.jdesktop.layout.GroupLayout jtSbeLayout = new org.jdesktop.layout.GroupLayout(jtSbe);
            jtSbe.setLayout(jtSbeLayout);
            jtSbeLayout.setHorizontalGroup(
                jtSbeLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(0, 513, Short.MAX_VALUE)
            );
            jtSbeLayout.setVerticalGroup(
                jtSbeLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(0, 182, Short.MAX_VALUE)
            );

            Pseccion.add(jtSbe, java.awt.BorderLayout.CENTER);

            cTabbedPane1.addTab("Secciones", Pseccion);

            Ptarifa.setLayout(new java.awt.BorderLayout());

        }

        org.jdesktop.layout.GroupLayout jtTarLayout = new org.jdesktop.layout.GroupLayout(jtTar);
        jtTar.setLayout(jtTarLayout);
        jtTarLayout.setHorizontalGroup(
            jtTarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 513, Short.MAX_VALUE)
        );
        jtTarLayout.setVerticalGroup(
            jtTarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 182, Short.MAX_VALUE)
        );

        Ptarifa.add(jtTar, java.awt.BorderLayout.CENTER);

        cTabbedPane1.addTab("Tarifas", Ptarifa);

        org.jdesktop.layout.GroupLayout PprincLayout = new org.jdesktop.layout.GroupLayout(Pprinc);
        Pprinc.setLayout(PprincLayout);
        PprincLayout.setHorizontalGroup(
            PprincLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(PprincLayout.createSequentialGroup()
                .add(PprincLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(PprincLayout.createSequentialGroup()
                        .add(24, 24, 24)
                        .add(Pcabe, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(PprincLayout.createSequentialGroup()
                        .add(84, 84, 84)
                        .add(Baceptar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 153, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(51, 51, 51)
                        .add(Bcancelar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(PprincLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(cTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 518, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(272, Short.MAX_VALUE))
        );
        PprincLayout.setVerticalGroup(
            PprincLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(PprincLayout.createSequentialGroup()
                .add(Pcabe, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 210, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(PprincLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Baceptar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(Bcancelar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(77, 77, 77))
        );

        getContentPane().add(Pprinc, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void iniciarVentana() throws Exception {
        Pprinc.setButton(KeyEvent.VK_F4, Baceptar);
        rep_codiE.setColumnaAlias("rep_codi");
        rep_nombE.setColumnaAlias("rep_nomb");
        cue_codiE.setColumnaAlias("cue_codi");
        rep_direcE.setColumnaAlias("rep_direc");
        rep_poblE.setColumnaAlias("rep_pobl");
        rep_codpoE.setColumnaAlias("rep_codpoE");
        rep_telefE.setColumnaAlias("rep_telef");
        rep_faxE.setColumnaAlias("rep_fax");
        rep_nifE.setColumnaAlias("rep_nif");
        rep_emailE.setColumnaAlias("rep_email");
        
        verDatos();
    }

    public void PADPrimero() {
        verDatos();
    }

    public void PADAnterior() {
        verDatos();
    }

    public void PADSiguiente() {
        verDatos();
    }

    public void PADUltimo() {
        verDatos();
    }

    @Override
    public void PADQuery() {
//        System.out.println("Alto: "+this.getSize().height+" Ancho: "+this.getSize().width);
        activar(true,navegador.QUERY);
        Pcabe.setQuery(false);
        Pdatos.setQuery(true);
        Pdatos.resetTexto();
        Pcabe.resetTexto();
        mensajeErr("Introduzca criterios para Filtro de Busqueda");
        rep_codiE.requestFocus();
    }


 public void ej_query1(){
   Component c;
   if ( (c = Pcabe.getErrorConf()) != null)
   {
     c.requestFocus();
     mensaje("Error en Criterios de busqueda");
     return;
   }
   if ( (c = Pdatos.getErrorConf()) != null)
   {
     c.requestFocus();
     mensaje("Error en Criterios de busqueda");
     return;
   }

   Vector v = new Vector();
    v.addElement(rep_codiE.getStrQuery());
    v.addElement(rep_nombE.getStrQuery());
    v.addElement(cue_codiE.getStrQuery());
    v.addElement(rep_direcE.getStrQuery());
    v.addElement(rep_poblE.getStrQuery());
    v.addElement(rep_codpoE.getStrQuery());
    v.addElement(rep_faxE.getStrQuery());
    v.addElement(rep_telefE.getStrQuery());
    v.addElement(rep_nifE.getStrQuery());
    v.addElement(rep_emailE.getStrQuery());
    

    s = "SELECT * FROM represent ";
    s = creaWhere(s, v,true);
    s+=" ORDER BY rep_codi ";
    Pdatos.setQuery(false);
    Pcabe.setQuery(false);
//    debug(s);
    try
    {
      if (!dtCons.select(s))
      {
        mensaje("");
        mensajeErr("No encontrados Registros para estos criterios");
        rgSelect();
        activaTodo();
        verDatos();
        return;
      }
      mensaje("");
      strSql = s;
      activaTodo();
      rgSelect();
      verDatos();
      mensajeErr("Nuevos registros selecionados");
    }
    catch (Exception ex)
    {
      fatalError("Error al buscar Representantes: ", ex);
    }

 }

 public void canc_query(){
   Pdatos.setQuery(false);
   Pcabe.setQuery(false);
   activaTodo();
   verDatos();
   mensajeErr("Introducion filtro busqueda ... CANCELADO");
   mensaje("");
 }
 @Override
 public void PADEdit(){
   activar(true,navegador.EDIT);
   try
   {
     if ( ! lockRegistro())
            return;
   }
   catch (Exception k)
   {
     Error("Error al bloquear el registro", k);
     return;
   }
   jtZon.requestFocusInicio();
   jtTar.requestFocusInicio();
   jtSbe.requestFocusInicio();
   rep_nombE.requestFocus();
   mensaje("Modificando datos de registro activo ...");
 }

    private boolean lockRegistro() throws UnknownHostException, SQLException, ParseException {
        if (!setBloqueo(dtAdd, "represent", rep_codiE.getText())) {
            msgBox(msgBloqueo);
            nav.pulsado = navegador.NINGUNO;
            activaTodo();
            dtAdd.getConexion().rollback();
            return false;
        }
        if (!dtAdd.select("SELECT * FROM represent WHERE rep_codi = '" + rep_codiE.getText() + "'", true)) {
            mensajeErr("Registro ha sido borrado");
            resetBloqueo(dtAdd, "represent", rep_codiE.getText());
            activaTodo();
            mensaje("");
            return false;
        }
        return true;
    }

 public void ej_edit1(){
   try
   {
     dtAdd.edit();
     actDatos(dtAdd);
     resetBloqueo(dtAdd,"represent", rep_codiE.getText());
     ctUp.commit();
   }
   catch (Throwable ex)
   {
     Error("Error al Modificar datos", ex);
     return;
   }
   mensaje("");
   mensajeErr("Datos ... Modificados");
   activaTodo();
   verDatos();

 }

 public void canc_edit()
 {
   mensaje("");
   try
   {
     resetBloqueo(dtAdd, "represent", rep_codiE.getText());

   }
   catch (Exception ex)
   {
     Error("Error al Quitar Bloquo", ex);
     return;
   }
   mensajeErr("Modificacion de Datos Cancelada");
   activaTodo();
   verDatos();
 }
    @Override
 public void PADAddNew(){
   jtZon.removeAllDatos();
   jtSbe.removeAllDatos();
   jtTar.removeAllDatos();
   activar(true);
   mensaje("Insertando Representante ...");
   Pcabe.resetTexto();
   Pdatos.resetTexto();
   jtZon.requestFocusInicio();
   jtTar.requestFocusInicio();
   jtSbe.requestFocusInicio();

   rep_codiE.requestFocus();
 }
 /**
  * Comprueba si existe un representante
  * @param repCodi Codigo de representante
  * @param dt DatosTabla a utilizar
  * @return true si existe 
  * @throws SQLException
  */
 boolean existeRep(String repCodi, DatosTabla dt) throws SQLException
 {
    s = "SELECT * FROM represent WHERE rep_codi = '" + repCodi+"'";
    return dt.select(s);
 }
 @Override
 public boolean checkEdit()
 {
   if (rep_nombE.isNull())
   {
     mensajeErr("Introduzca Nombre de Representante");
     rep_nombE.requestFocus();
     return false;
   }
   jtZon.procesaAllFoco();
   if (cambiaLinZon()>=0)
       return false;
   jtTar.procesaAllFoco();
   if (cambiaLinTar()>=0)
       return false;
   jtSbe.procesaAllFoco();
   if (cambiaLinSbe()>=0)
       return false;
   return true;
 }
 @Override
 public boolean checkAddNew()
 {
   return checkEdit();
   
 }
 public void ej_addnew1()
 {
        try {
            if (existeRep(rep_codiE.getText(), dtStat)) {
                msgBox("Representante ya ha sido dado de alta");
                rep_codiE.requestFocus();
                return;
            }
            dtAdd.addNew("represent");
            dtAdd.setDato("rep_codi", rep_codiE.getText());

            actDatos(dtAdd);
           
            dtAdd.commit();
            mensajeErr("Alta ... REALIZADA");
            mensaje("");
            activaTodo();
        } catch (Exception k) {
            Error("Error al Insertar Numeracion", k);
        }
  }

    void actDatos(DatosTabla dt) throws Exception {
        dt.setDato("rep_nomb", rep_nombE.getText());
        dt.setDato("cue_codi", cue_codiE.getText());
        dt.setDato("rep_direc", rep_direcE.getText());
        dt.setDato("rep_pobl", rep_poblE.getText());
        dt.setDato("rep_codpo", rep_codpoE.getText());
        dt.setDato("rep_telef", rep_telefE.getText());
        dt.setDato("rep_fax", rep_faxE.getText());
        dt.setDato("rep_nif", rep_nifE.getText());
        dt.setDato("rep_email", rep_emailE.getText());
        dt.update();
        deleteRepr(rep_codiE.getText(),dt);
        int nRow=jtZon.getRowCount();
        for (int n=0;n<nRow;n++)
        {
            if (jtZon.getValString(n,0).trim().equals(""))
                continue;
            s="select * from reprzona where rep_codi='"+rep_codiE.getText()+"'"+
                  " and zon_codi = '"+jtZon.getValString(n,0)+"'";
            if (dt.select(s))
                continue;
            dt.addNew("reprzona");
            dt.setDato("rep_codi",rep_codiE.getText());
            dt.setDato("zon_codi",jtZon.getValString(n,0));
            dt.update();
        }
        nRow=jtSbe.getRowCount();
        for (int n=0;n<nRow;n++)
        {
            if (jtSbe.getValorInt(n,0)==0)
                continue;
            s="select * from reprsecion where rep_codi='"+rep_codiE.getText()+"'"+
                  " and sbe_codi = "+jtSbe.getValorInt(n,0);
            if (dt.select(s))
                continue;
            dt.addNew("reprsecion");
            dt.setDato("rep_codi",rep_codiE.getText());
            dt.setDato("sbe_codi",jtSbe.getValorInt(n,0));
            dt.update();
        }
        nRow=jtTar.getRowCount();
        for (int n=0;n<nRow;n++)
        {
            if (jtTar.getValorInt(n,0)==0)
                continue;
            s="select * from reprtari where rep_codi='"+rep_codiE.getText()+"'"+
                  " and tar_codi = "+jtTar.getValorInt(n,0);
            if (dt.select(s))
                continue;
            dt.addNew("reprtari");
            dt.setDato("rep_codi",rep_codiE.getText());
            dt.setDato("tar_codi",jtTar.getValorInt(n,0));
            dt.update();
        }
    }
 public void deleteRepr(String repCodi,DatosTabla dt) throws SQLException
 {
      s="DELETE FROM reprzona where rep_codi ='"+repCodi+"'";
      dt.executeUpdate(s);
      s="DELETE FROM reprsecion where rep_codi ='"+repCodi+"'";
      dt.executeUpdate(s);
      s="DELETE FROM reprtari where rep_codi ='"+repCodi+"'";
      dt.executeUpdate(s);
 }
 public void canc_addnew(){
   mensaje("");
   mensajeErr("Cancelada Alta ...");
   verDatos();
   activaTodo();
 }

 @Override
 public void PADDelete(){
     try
     {
       if (! lockRegistro())
           return;
     }
     catch (Exception k)
     {
       Error("Error al bloquear el registro", k);
       return;
     }
     Baceptar.setEnabled(true);
     Bcancelar.setEnabled(true);
     Bcancelar.requestFocus();
     mensaje("Borrar registro activo ...");
 }

 public void ej_delete1(){
   try
     {
       dtAdd.delete(stUp);
       deleteRepr(rep_codiE.getText() , dtAdd);
       resetBloqueo(dtAdd, "represent", rep_codiE.getText());
       ctUp.commit();
       rgSelect();
     }
     catch (Exception ex)
     {
       Error("Error al borrar Registro",ex);
     }
     activaTodo();
     verDatos();
     mensaje("");
     mensajeErr("Registro ... Borrado");
 }

 public void canc_delete(){
   mensaje("");
   try
   {
     resetBloqueo(dtAdd, "represent", rep_codiE.getText());
   }
   catch (Exception ex)
   {
     Error("Error al Quitar Bloqueo", ex);
     return;
   }
   mensajeErr("Modificacion de Datos Cancelada");
   activaTodo();
   verDatos();
 }
public void activar(boolean b){
    activar(b,navegador.ADDNEW);
}

 public void activar(boolean b,int estado){
     if (estado==navegador.ADDNEW || estado==navegador.QUERY)
        rep_codiE.setEnabled(b);
     rep_nombE.setEnabled(b);
     cue_codiE.setEnabled(b);
     rep_direcE.setEnabled(b);
     rep_poblE.setEnabled(b);
     rep_codpoE.setEnabled(b);
     rep_telefE.setEnabled(b);
     rep_faxE.setEnabled(b);
     rep_nifE.setEnabled(b);
     rep_emailE.setEnabled(b);
     if (estado==navegador.ADDNEW || estado==navegador.EDIT)
     {
         jtZon.setEnabled(b);
         jtSbe.setEnabled(b);
         jtTar.setEnabled(b);
     }
     Baceptar.setEnabled(b);
     Bcancelar.setEnabled(b);
 }
    void verDatos() {
        try {
            if (dtCons.getNOREG()) {
                return;
            }
            jtZon.removeAllDatos();
            jtSbe.removeAllDatos();
            jtTar.removeAllDatos();
            rep_codiE.setText(dtCons.getString("rep_codi"));
            rep_nombE.setText(dtCons.getString("rep_nomb"));
           
            if (!existeRep(rep_codiE.getText(),dtCon1)) {
                mensajeErr("Representante NO ENCONTRADA ... SEGURAMENTE SE BORRO");
                Pdatos.resetTexto();
                return;
            }
            rep_nombE.setText(dtCon1.getString("rep_nomb"));
            cue_codiE.setText(dtCon1.getString("cue_codi"));
            rep_direcE.setText(dtCon1.getString("rep_direc"));
            rep_poblE.setText(dtCon1.getString("rep_pobl"));
            rep_codpoE.setText(dtCon1.getString("rep_codpo"));
            rep_telefE.setText(dtCon1.getString("rep_telef"));
            rep_faxE.setText(dtCon1.getString("rep_fax"));
            rep_nifE.setText(dtCon1.getString("rep_nif"));
            rep_emailE.setText(dtCon1.getString("rep_email"));
            
            s="SELECT r.zon_codi,zon_nomb FROM reprzona as r,v_zonas as z" +
                    " WHERE rep_codi ='"+dtCons.getString("rep_codi")+"'"+
                    " and r.zon_codi = z.zon_codi "+
                    " ORDER BY r.zon_codi ";
            if (dtCon1.select(s))
            {
                do
                {
                    Vector v=new Vector();
                    v.addElement(dtCon1.getString("zon_codi"));
                    v.addElement(dtCon1.getString("zon_nomb"));
                    jtZon.addLinea(v);
                } while (dtCon1.next());
                jtZon.requestFocusInicio();
            }
            s="SELECT r.sbe_codi,sbe_nomb FROM reprsecion as r,subempresa as s" +
                    " WHERE rep_codi ='"+dtCons.getString("rep_codi")+"'"+
                    " and s.sbe_codi = r.sbe_codi "+
                    " and s.emp_codi = "+EU.em_cod+
                    " ORDER BY r.sbe_codi ";
            if (dtCon1.select(s))
            {
                do
                {
                    Vector v=new Vector();
                    v.addElement(dtCon1.getString("sbe_codi"));
                    v.addElement(dtCon1.getString("sbe_nomb"));
                    jtSbe.addLinea(v);
                } while (dtCon1.next());
                jtSbe.requestFocusInicio();
            }
            s="SELECT r.tar_codi,tar_nomb FROM reprtari as r,tipotari as t" +
                    " WHERE rep_codi ='"+dtCons.getString("rep_codi")+"'"+
                    " and t.tar_codi = r.tar_codi "+
                    " ORDER BY r.tar_codi ";
            if (dtCon1.select(s))
            {
                do
                {
                    Vector v=new Vector();
                    v.addElement(dtCon1.getString("tar_codi"));
                    v.addElement(dtCon1.getString("tar_nomb"));
                    jtTar.addLinea(v);
                } while (dtCon1.next());
                jtTar.requestFocusInicio();
            }
        } catch (Exception k) {
            Error("Error al ver Datos", k);
            return;
        }
    }
    private void cambiaColZon(int col,int row)
    {
        if (col!=0)
            return;
        try {
            if (zon_codiE.isNull())
                jtZon.setValor("",row,1);
            String zonNomb=getNombZona(zon_codiE.getText());
            if (zonNomb==null)
                zonNomb="";
             jtZon.setValor(zonNomb,row,1);
        } catch (SQLException k)
        {
            Error("Error al buscar Zona: ",k);
            return;
        }
    }
    private int cambiaLinZon()
    {
        if (zon_codiE.isNull())
             return -1;
        try
        {
            if (getNombZona(zon_codiE.getText())==null)
            {
                mensajeErr("Zona NO valida");
                return 0;
            }
        } catch (SQLException k)
        {
            Error("Error al buscar Zona: ",k);
        }
        return -1;
    }
    private String getNombZona(String zona) throws SQLException
    {
        String str="select zon_nomb from v_zonas where zon_codi ='"+zona+"'";
        if (!dtStat.select(str))
            return null;
        return dtStat.getString("zon_nomb");
    }

    private void cambiaColTar(int col,int row)
    {
        if (col!=0)
            return;
        try {
            if (tar_codiE.isNull())
                jtTar.setValor("",row,1);
            String tarNomb=getNombTarifa(tar_codiE.getValorInt());
            if (tarNomb==null)
                tarNomb="";
             jtTar.setValor(tarNomb,row,1);
        } catch (SQLException k)
        {
            Error("Error al buscar Tarifa: ",k);
            return;
        }
    }
    private int cambiaLinTar()
    {
        if (tar_codiE.isNull())
             return -1;
        try
        {
            if (getNombTarifa(tar_codiE.getValorInt())==null)
            {
                mensajeErr("Tarifa NO valida");
                return 0;
            }
        } catch (SQLException k)
        {
            Error("Error al buscar Tarifa: ",k);
        }
        return -1;
    }
    private String getNombTarifa(int tarifa) throws SQLException
    {
        String str="select tar_nomb from tipotari where tar_codi ="+tarifa;
        if (!dtStat.select(str))
            return null;
        return dtStat.getString("tar_nomb");
    }
 private void cambiaColSbe(int col,int row)
    {
        if (col!=0)
            return;
        try {
            if (sbe_codiE.isNull())
                jtSbe.setValor("",row,1);
            String sbeNomb=getNombSecion(sbe_codiE.getValorInt());
            if (sbeNomb==null)
                sbeNomb="";
             jtSbe.setValor(sbeNomb,row,1);
        } catch (SQLException k)
        {
            Error("Error al buscar Sección: ",k);
            return;
        }
    }
    private int cambiaLinSbe()
    {
        if (sbe_codiE.isNull())
             return -1;
        try
        {
            if (getNombSecion(sbe_codiE.getValorInt())==null)
            {
                mensajeErr("Seccion NO valida");
                return 0;
            }
        } catch (SQLException k)
        {
            Error("Error al buscar Seccion: ",k);
        }
        return -1;
    }
    private String getNombSecion(int seccion) throws SQLException
    {
        String str="select sbe_nomb from subempresa where sbe_codi ="+seccion;
        if (!dtStat.select(str))
            return null;
        return dtStat.getString("sbe_nomb");
    }
    public static void llenaLinkBox(CLinkBox lk,DatosTabla dt) throws SQLException
    {
        llenaLinkBox(lk,null,dt);
    }
    public static void llenaLinkBox(CLinkBox lk,String limitador,DatosTabla dt) throws SQLException
    {
        String strSql = "SELECT rep_codi,rep_nomb FROM represent "+
                (limitador!=null?"and rep_codi like '"+limitador+"'":"")+
                " ORDER BY rep_nomb";
        dt.select(strSql);
        lk.addDatos(dt);
    }
    public static String getNombRepr(String repCodi,DatosTabla dt) throws SQLException
    {
        String strSql = "SELECT rep_nomb FROM represent "+
              " where rep_codi ='"+repCodi+"'";
        if (!dt.select(strSql))
            return null;
        return dt.getString("rep_nomb");
    }
    public static String checkRepr(String repCodi, String zonCodi, int sbeCodi, int tarCodi, DatosTabla dt) throws SQLException
    {
        String s="SELECT * FROM reprzona where rep_codi ='"+repCodi+"'";
        if (dt.select(s))
        {
            s="SELECT * FROM reprzona where rep_codi ='"+repCodi+"'"+
                " and zon_codi = '"+zonCodi+"'";
            if (! dt.select(s))
                return "Representante NO puede trabajar en esa ZONA";
        }
      s="SELECT * FROM reprsecion where rep_codi ='"+repCodi+"'";
      if (dt.select(s))
      {
          s="SELECT *  FROM reprsecion where rep_codi ='"+repCodi+"'"+
                  " and sbe_codi = "+sbeCodi;
          if (!dt.select(s))
              return "Representante NO puede trabajar en esta SECCION (SubEmpresa)";
      }
      s="SELECT * FROM reprtari where rep_codi ='"+repCodi+"'";
      if (dt.select(s))
      {
         s="SELECT * FROM reprtari where rep_codi ='"+repCodi+"'"+
                 " AND tar_codi = "+tarCodi;
         if (!dt.select(s))
             return "Este Representante NO puede usar esta tarifa";
      }
      return null;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private gnu.chu.controles.CButton Baceptar;
    private gnu.chu.controles.CButton Bcancelar;
    private gnu.chu.controles.CPanel Pcabe;
    private gnu.chu.controles.CPanel Pdatos;
    private gnu.chu.controles.CPanel Pprinc;
    private gnu.chu.controles.CPanel Pseccion;
    private gnu.chu.controles.CPanel Ptarifa;
    private gnu.chu.controles.CPanel Pzona;
    private gnu.chu.controles.CLabel cLabel20;
    private gnu.chu.controles.CLabel cLabel21;
    private gnu.chu.controles.CLabel cLabel22;
    private gnu.chu.controles.CLabel cLabel23;
    private gnu.chu.controles.CLabel cLabel24;
    private gnu.chu.controles.CLabel cLabel25;
    private gnu.chu.controles.CLabel cLabel26;
    private gnu.chu.controles.CLabel cLabel27;
    private gnu.chu.controles.CTabbedPane cTabbedPane1;
    private gnu.chu.controles.CTextField cue_codiE;
    private gnu.chu.controles.CGridEditable jtSbe;
    private gnu.chu.controles.CGridEditable jtTar;
    private gnu.chu.controles.CGridEditable jtZon;
    private gnu.chu.controles.CTextField rep_codiE;
    private gnu.chu.controles.CLabel rep_codiL;
    private gnu.chu.controles.CTextField rep_codpoE;
    private gnu.chu.controles.CTextField rep_direcE;
    private gnu.chu.controles.CTextField rep_emailE;
    private gnu.chu.controles.CTextField rep_faxE;
    private gnu.chu.controles.CTextField rep_nifE;
    private gnu.chu.controles.CTextField rep_nombE;
    private gnu.chu.controles.CTextField rep_poblE;
    private gnu.chu.controles.CTextField rep_telefE;
    private gnu.chu.controles.CTextField sbe_codiE;
    private gnu.chu.controles.CTextField sbe_nombE;
    private gnu.chu.controles.CTextField tar_codiE;
    private gnu.chu.controles.CTextField tar_nombE;
    private gnu.chu.controles.CTextField zon_codiE;
    private gnu.chu.controles.CTextField zon_nombE;
    // End of variables declaration//GEN-END:variables

}
