package gnu.chu.anjelica.pad;
/**
 *
 * <p>Título: MantIdiomas </p>
 * <p>Descripcion: Mantenimiento Tabla de Idiomas</p>
 * <p>Empresa: miSL</p>
*  <p>Copyright: Copyright (c) 2005-2016
 *  Este programa es software libre. Puede redistribuirlo y/o modificarlo bajo
 *  los terminos de la Licencia Pública General de GNU según es publicada por
 *  la Free Software Foundation, bien de la versión 2 de dicha Licencia
 *  o bien (según su elección) de cualquier versión posterior.
 *  Este programa se distribuye con la esperanza de que sea útil,ed
 *  pero SIN NINGUNA GARANTIA, incluso sin la garantía MERCANTIL implícita
 *  o sin garantizar la CONVENIENCIA PARA UN PROPOSITO PARTICULAR.
 *  Véase la Licencia Pública General de GNU para más detalles.
 *  Debería haber recibido una copia de la Licencia Pública General junto con este programa.
 *  Si no ha sido así, escriba a la Free Software Foundation, Inc.,
 *  en 675 Mass Ave, Cambridge, MA 02139, EEUU.
 * </p>
 * @author ChuchiP
 * @version 1.0
 */ 
import gnu.chu.Menu.Principal;
import gnu.chu.anjelica.menu;
import gnu.chu.controles.StatusBar;
import gnu.chu.interfaces.PAD;
import gnu.chu.sql.DatosTabla;
import gnu.chu.utilidades.EntornoUsuario;
import gnu.chu.utilidades.navegador;
import gnu.chu.utilidades.ventanaPad;
import java.awt.BorderLayout;
import java.awt.Component;
import java.net.UnknownHostException;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;


public class MantIdiomas extends ventanaPad implements PAD
{

  
  public MantIdiomas(EntornoUsuario eu, Principal p)
  {

    EU = eu;
    vl = p.panel1;
    jf = p;
    eje = true;

    try
    {
     
      setTitulo("Mantenimiento de IDIOMAS");

      if (jf.gestor.apuntar(this))
        jbInit();
      else
        setErrorInit(true);
    }
    catch (Exception e)
    {
      ErrorInit(e);
      setErrorInit(true);
    }
  }

  public MantIdiomas(menu p, EntornoUsuario eu)
  {
    EU = eu;
    vl = p.getLayeredPane();
    eje = false;

    try
    {
     
      setTitulo("Mantenimiento de IDIOMAS");
      jbInit();
    }
    catch (Exception e)
    {
      ErrorInit(e);
      setErrorInit(true);
    }
  }
private void jbInit() throws Exception {
        statusBar = new StatusBar(this);
        nav = new navegador(this, dtCons, false,  navegador.NORMAL);
        iniciarFrame();
//        this.setResizable(false);

        this.setVersion("2016-05-20");
        strSql = "SELECT * FROM locales  "+
                " ORDER BY loc_codi";

        this.getContentPane().add(nav, BorderLayout.NORTH);
        this.getContentPane().add(statusBar, BorderLayout.SOUTH);
        this.setPad(this);
        dtCons.setLanzaDBCambio(false);
        conecta();
        initComponents();
        iniciarBotones(Baceptar, Bcancelar);
       
        navActivarAll();
        this.setSize(400,200);
        activar(false);

    }
    @Override
    public void iniciarVentana() throws Exception
    {
        loc_codiE.setColumnaAlias("loc_codi");
        loc_nombE.setColumnaAlias("loc_nomb");
        verDatos(dtCons);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Pprinc = new gnu.chu.controles.CPanel();
        cLabel8 = new gnu.chu.controles.CLabel();
        loc_codiE = new gnu.chu.controles.CTextField(Types.CHAR,"X",5);
        cLabel9 = new gnu.chu.controles.CLabel();
        loc_nombE = new gnu.chu.controles.CTextField(Types.CHAR,"X",30);
        Bcancelar = new gnu.chu.controles.CButton();
        Baceptar = new gnu.chu.controles.CButton();

        Pprinc.setLayout(null);

        cLabel8.setText("Codigo Idioma ");
        Pprinc.add(cLabel8);
        cLabel8.setBounds(10, 10, 100, 17);
        Pprinc.add(loc_codiE);
        loc_codiE.setBounds(110, 10, 60, 20);

        cLabel9.setText("Descripcion");
        Pprinc.add(cLabel9);
        cLabel9.setBounds(10, 40, 80, 17);
        Pprinc.add(loc_nombE);
        loc_nombE.setBounds(110, 40, 270, 20);

        Bcancelar.setText("Cancelar");
        Pprinc.add(Bcancelar);
        Bcancelar.setBounds(210, 80, 120, 30);

        Baceptar.setText("Aceptar");
        Pprinc.add(Baceptar);
        Baceptar.setBounds(50, 80, 120, 30);

        getContentPane().add(Pprinc, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private gnu.chu.controles.CButton Baceptar;
    private gnu.chu.controles.CButton Bcancelar;
    private gnu.chu.controles.CPanel Pprinc;
    private gnu.chu.controles.CLabel cLabel8;
    private gnu.chu.controles.CLabel cLabel9;
    private gnu.chu.controles.CTextField loc_codiE;
    private gnu.chu.controles.CTextField loc_nombE;
    // End of variables declaration//GEN-END:variables

    @Override
    public void PADPrimero() {
       verDatos(dtCons);
    }

    @Override
    public void PADAnterior() {
          verDatos(dtCons);
    }

    @Override
    public void PADSiguiente() {
          verDatos(dtCons);
    }

    @Override
    public void PADUltimo() {
          verDatos(dtCons);
    }
    void verDatos(DatosTabla dt)
    {
        try
        {
            if (dt.getNOREG())
                return;
            
            loc_codiE.setText(dt.getString("loc_codi"));
            
            String s = "SELECT * FROM locales WHERE  loc_codi = '" + dt.getString("loc_codi")+"'";
            if (!dtCon1.select(s))
            {
                mensajeErr("Codigo NO ENCONTRADO ... SEGURAMENTE SE BORRO");
                loc_nombE.resetTexto();                
                return;
            }
            loc_nombE.setText(dtCon1.getString("loc_nomb"));
        } catch (Exception k)
        {
            Error("Error al ver Datos", k);
        }
    }
      @Override
  public void PADAddNew()
  {
    Pprinc.resetTexto();
    activar(true);
    
    loc_codiE.requestFocus();
  }
    @Override
  public void PADEdit()
  {
    activar(true);
    loc_codiE.setEnabled(false);
    try
    {
      if (!setBloqueo(dtAdd, "locales", loc_codiE.getText()))
       {
         msgBox(msgBloqueo);
         nav.pulsado = navegador.NINGUNO;
         activaTodo();
         return;
       }

      if (! dtAdd.select("select * from locales where loc_codi= '"+loc_codiE.getText()+"'",true))
      {
        mensajeErr("Registro ha sido borrado");
        resetBloqueo(dtAdd, "locales",  loc_codiE.getText());
        activaTodo();
        mensaje("");
       return;
      }

    }
    catch (SQLException | UnknownHostException k)
    {
      Error("Error al bloquear el registro", k);
      return;
    }   
    loc_nombE.requestFocus();
  }

  @Override
  public void PADQuery()
  {
    activar(true);    
    Pprinc.setQuery(true);
    Pprinc.resetTexto();
    loc_codiE.requestFocus();
  }
    @Override
    public void ej_query1() {
        Component c;
        if ((c = Pprinc.getErrorConf()) != null)
        {
            c.requestFocus();
            mensaje("Error en Criterios de busqueda");
            return;
        }
        ArrayList v = new ArrayList();
    v.add(loc_codiE.getStrQuery());
    v.add(loc_nombE.getStrQuery());
    String s = "SELECT * FROM locales ";
    s = creaWhere(s, v,true);
    Pprinc.setQuery(false);
    
    
//    debug(s);
    try
    {
      if (!dtCons.select(s))
      {
        mensaje("");
        mensajeErr("No encontrados Registros para estos criterios");
        rgSelect();
        activaTodo();
        verDatos(dtCons);
        return;
      }
      mensaje("");
      strSql = s;
      nav.pulsado=navegador.NINGUNO;
      activaTodo();
      rgSelect();
      verDatos(dtCons);
      mensajeErr("Nuevos registros selecionados");
    }
    catch (Exception ex)
    {
      fatalError("Error al buscar Locales: ", ex);
    }
    }

    @Override
    public void canc_query() {
       mensaje("");
    mensajeErr("Consulta ... CANCELADA");
    nav.pulsado=navegador.NINGUNO;
    activaTodo();
    verDatos(dtCons);Pprinc.setQuery(false);
    
    
    }

    @Override
    public void ej_edit1() {
      try
    {
      dtAdd.edit(dtAdd.getCondWhere());
     
      dtAdd.setDato("loc_nomb",loc_nombE.getText());
      dtAdd.update(stUp);
     
      resetBloqueo(dtAdd, "locales",  loc_codiE.getText(),false);
      ctUp.commit();
      verDatos(dtCons);
    }
    catch (Throwable ex)
    {
      Error("Error al Modificar datos", ex);
      return;
    }
    mensaje("");
    mensajeErr("Datos ... Modificados");
    nav.pulsado=navegador.NINGUNO;
    activaTodo();
    }

    @Override
    public void canc_edit() {
        try
        {
            resetBloqueo(dtAdd, "locales", loc_codiE.getText());
        } catch (Exception k)
        {
            Error("Error al Desbloquear el registro", k);
            return;
        }

        mensaje("");
        nav.pulsado = navegador.NINGUNO;
        activaTodo();
        mensajeErr("Modificacion de Datos Cancelada");
        verDatos(dtCons);        
    }
    @Override
    public boolean checkEdit() {
        return checkAddNew();
    }

    @Override
    public boolean checkAddNew()
    {

        if (loc_codiE.isNull())
        {
            mensajeErr("Introduzca un codigo para el Producto");
            loc_codiE.requestFocus();
            return false;
        }
        if (loc_nombE.isNull())
        {
            mensajeErr("Introduzca Descripcion de Producto");
            loc_nombE.requestFocus();
            return false;
        }
        return true;
    }

    @Override
    public void ej_addnew1() {
        try
        {
            String s = "SELECT * FROM locales WHERE "
                + " loc_codi = '" + loc_codiE.getText() + "'";
            if (dtStat.select(s))
            {
                mensajeErr("Codigo de Articulo ya existe");
                return;
            }
            mensaje("Insertando PRODUCTO ...", false);
            dtAdd.addNew("locales");
            dtAdd.setDato("loc_codi", loc_codiE.getText());
            dtAdd.setDato("loc_nomb", loc_nombE.getText());
            dtAdd.update(stUp);
            ctUp.commit();
        } catch (Exception ex)
        {
            Error("Error al Insertar datos", ex);
            return;
        }
        mensaje("");
        mensajeErr("Datos ... Insertados");
        nav.pulsado = navegador.NINGUNO;
        activaTodo();

    }

    @Override
    public void canc_addnew() {
    mensaje("");
      nav.pulsado=navegador.NINGUNO;
      activaTodo();
      mensajeErr("Insercion de Datos Cancelada");
      verDatos(dtCons);    
    }

    @Override
    public void ej_delete1() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void canc_delete() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void activar(boolean b) {
        Pprinc.setEnabled(b);
    }
    public static DatosTabla getDatos(DatosTabla dt) throws SQLException
    {
        dt.select("select loc_codi,loc_nomb from locales order by loc_codi");
        return dt;
    }
}
