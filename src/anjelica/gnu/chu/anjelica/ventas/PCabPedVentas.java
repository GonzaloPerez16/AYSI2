
package gnu.chu.anjelica.ventas;

import gnu.chu.camposdb.proPanel;
import gnu.chu.controles.CPanel;
import gnu.chu.controles.Cgrid;
import gnu.chu.controles.miCellRender;
import gnu.chu.sql.DatosTabla;
import gnu.chu.utilidades.EntornoUsuario;
import gnu.chu.utilidades.Formatear;
import gnu.chu.utilidades.cgpedven;
import gnu.chu.utilidades.ventana;
import java.awt.Color;
import java.awt.Dimension;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;

public class PCabPedVentas extends CPanel
{
    private String pvcComrep;
    ventana padre;
    String titUsunom;
    DatosTabla dtCon1,dtStat;
    EntornoUsuario EU;
    String pvcDepos;
    boolean swVerPrecio=true;
    int pvcAno,pvcNume;
    public static final int  JT_TIPLIN=0;
    final int JT_PROCOD=1;
    final int JT_PRONOMB=2;
    final int JT_CANPED=3;
    final int JT_CANPRE=4;
    final int JT_KGPRE=5;
    final int JT_NUMIND=6;
    final int JT_PRECIO=7;
    final int JT_COMENT=8;
    final int JT_NUMLIN=9;
    /**
     * Creates new form PCabPedVentas
     */
    public PCabPedVentas() {
        initComponents();
    }
    public void iniciar(ventana papa) throws SQLException
    {
        padre=papa;
        dtCon1=papa.dtCon1;
        dtStat=papa.dtStat;
        EU=papa.EU;
        prv_codiE.iniciar(dtStat, padre, padre.vl, EU);
        prv_codiE.setEnabled(false);
    }
    @Override
    public void resetTexto()
    {
        jtLinPed.removeAllDatos();
        usu_nombE.resetTexto();
        tit_tiempoE.resetTexto();
        pvc_fecpedE.resetTexto();
        pvc_horpedE.resetTexto();
        usu_nombE.resetTexto();
        prv_codiE.resetTexto();
        pvc_fecpedE.resetTexto();    
        pvc_impresE.resetTexto();
        pvc_fecpreE.resetTexto();
    }
    public void setVerPrecio(boolean swVerPrecio )
    {
        this.swVerPrecio=swVerPrecio;
    }
    public String getDeposito()
    {
        return pvcDepos;
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jtLinPed = new gnu.chu.controles.Cgrid(10);
        PPie = new gnu.chu.controles.CPanel();
        cLabel17 = new gnu.chu.controles.CLabel();
        nPedT = new gnu.chu.controles.CTextField(Types.DECIMAL,"##9");
        pvc_fecpedE = new gnu.chu.controles.CTextField(Types.DATE,"dd-MM-yyyy");
        pvc_horpedE = new gnu.chu.controles.CTextField(Types.DECIMAL, "99.99");
        usu_nombE = new gnu.chu.controles.CTextField();
        pvc_impresE = new gnu.chu.controles.CCheckBox();
        scrollarea1 = new javax.swing.JScrollPane();
        pvc_comenE = new gnu.chu.controles.CTextArea();
        cLabel23 = new gnu.chu.controles.CLabel();
        opIgnCadE = new gnu.chu.controles.CCheckBox();
        opIgnPrvE = new gnu.chu.controles.CCheckBox();
        cLabel24 = new gnu.chu.controles.CLabel();
        cLabel25 = new gnu.chu.controles.CLabel();
        tit_tiempoE = new gnu.chu.controles.CTextField(Types.DECIMAL, "##9");
        usu_nomcoE = new gnu.chu.controles.CTextField();
        cLabel26 = new gnu.chu.controles.CLabel();
        cLabel27 = new gnu.chu.controles.CLabel();
        prv_codiE = new gnu.chu.camposdb.prvPanel();
        cLabel28 = new gnu.chu.controles.CLabel();
        pvc_feccadE = new gnu.chu.controles.CTextField(Types.DATE,"dd-MM-yyyy");
        cLabel29 = new gnu.chu.controles.CLabel();
        pvc_fecpreE = new gnu.chu.controles.CTextField(Types.DATE,"dd-MM-yy");

        setLayout(new java.awt.GridBagLayout());

        try {confJtLin();} catch (Exception k){Error("Error al configurar grid Lineas",k);}
        jtLinPed.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jtLinPed.setMaximumSize(new java.awt.Dimension(682, 102));
        jtLinPed.setMinimumSize(new java.awt.Dimension(682, 102));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jtLinPed, gridBagConstraints);

        PPie.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        PPie.setMaximumSize(new java.awt.Dimension(682, 62));
        PPie.setMinimumSize(new java.awt.Dimension(682, 62));
        PPie.setPreferredSize(new java.awt.Dimension(682, 62));
        PPie.setLayout(null);

        cLabel17.setText("Tiempo");
        cLabel17.setPreferredSize(new java.awt.Dimension(60, 18));
        PPie.add(cLabel17);
        cLabel17.setBounds(500, 2, 50, 18);

        nPedT.setEnabled(false);
        PPie.add(nPedT);
        nPedT.setBounds(300, 2, 30, 18);

        pvc_fecpedE.setEnabled(false);
        PPie.add(pvc_fecpedE);
        pvc_fecpedE.setBounds(300, 22, 70, 18);

        pvc_horpedE.setEnabled(false);
        PPie.add(pvc_horpedE);
        pvc_horpedE.setBounds(375, 22, 40, 18);

        usu_nombE.setEnabled(false);
        PPie.add(usu_nombE);
        usu_nombE.setBounds(470, 22, 90, 18);

        pvc_impresE.setText("Listado ");
        pvc_impresE.setEnabled(false);
        pvc_impresE.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        PPie.add(pvc_impresE);
        pvc_impresE.setBounds(610, 2, 70, 17);

        pvc_comenE.setColumns(20);
        pvc_comenE.setRows(5);
        scrollarea1.setViewportView(pvc_comenE);

        PPie.add(scrollarea1);
        scrollarea1.setBounds(2, 2, 210, 40);

        cLabel23.setText("Total Pedidos ");
        cLabel23.setPreferredSize(new java.awt.Dimension(60, 18));
        PPie.add(cLabel23);
        cLabel23.setBounds(220, 2, 80, 18);

        opIgnCadE.setSelected(true);
        opIgnCadE.setText("Ign. Caducidad");
        opIgnCadE.setToolTipText("Ignorar Caducicad");
        opIgnCadE.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        PPie.add(opIgnCadE);
        opIgnCadE.setBounds(110, 42, 100, 17);

        opIgnPrvE.setSelected(true);
        opIgnPrvE.setText("Ign. Proveedor");
        opIgnPrvE.setToolTipText("Ignorar Proveedor");
        opIgnPrvE.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        PPie.add(opIgnPrvE);
        opIgnPrvE.setBounds(2, 42, 100, 17);

        cLabel24.setText("Usuario");
        cLabel24.setPreferredSize(new java.awt.Dimension(60, 18));
        PPie.add(cLabel24);
        cLabel24.setBounds(420, 22, 50, 18);

        cLabel25.setText("Asignado");
        cLabel25.setPreferredSize(new java.awt.Dimension(60, 18));
        PPie.add(cLabel25);
        cLabel25.setBounds(340, 2, 60, 18);

        tit_tiempoE.setEnabled(false);
        PPie.add(tit_tiempoE);
        tit_tiempoE.setBounds(560, 2, 40, 18);

        usu_nomcoE.setEnabled(false);
        PPie.add(usu_nomcoE);
        usu_nomcoE.setBounds(400, 2, 90, 18);

        cLabel26.setText("Prov.");
        cLabel26.setPreferredSize(new java.awt.Dimension(60, 18));
        PPie.add(cLabel26);
        cLabel26.setBounds(220, 42, 40, 17);

        cLabel27.setText("Fec.Cad.");
        cLabel27.setPreferredSize(new java.awt.Dimension(60, 18));
        PPie.add(cLabel27);
        cLabel27.setBounds(555, 40, 50, 18);

        prv_codiE.setEditable(false);
        prv_codiE.setEditableParent(false);
        PPie.add(prv_codiE);
        prv_codiE.setBounds(260, 42, 281, 18);

        cLabel28.setText("Fecha Pedido ");
        cLabel28.setPreferredSize(new java.awt.Dimension(60, 18));
        PPie.add(cLabel28);
        cLabel28.setBounds(220, 22, 80, 18);

        pvc_feccadE.setToolTipText("");
        pvc_feccadE.setEnabled(false);
        PPie.add(pvc_feccadE);
        pvc_feccadE.setBounds(610, 40, 60, 18);

        cLabel29.setText("Fec. Prep.");
        cLabel29.setPreferredSize(new java.awt.Dimension(60, 18));
        PPie.add(cLabel29);
        cLabel29.setBounds(560, 20, 60, 18);

        pvc_fecpreE.setEnabled(false);
        PPie.add(pvc_fecpreE);
        pvc_fecpreE.setBounds(620, 20, 60, 18);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        add(PPie, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    
    public void setNumeroPedidos(int numPedidos)
    {
        nPedT.setValorInt(numPedidos);
    }
    
  private void confJtLin() throws Exception
   {
     ArrayList v = new ArrayList();
     v.add("Tipo"); // 0 Albaran o Pedido
     v.add("Prod."); // 1
     v.add("Desc. Prod."); // 2
     v.add("Pedido"); // 3
     v.add("Prepar"); // 4
     v.add("Kg.Prep"); // 5
     v.add("N.Ind."); // 6
     v.add("Precio"); // 7
     v.add("Comentario"); // 8 Comentario
     v.add("NL."); // 8
     jtLinPed.setCabecera(v);
     jtLinPed.setMaximumSize(new Dimension(548, 127));
     jtLinPed.setMinimumSize(new Dimension(548, 127));
     jtLinPed.setPreferredSize(new Dimension(548, 127));
     jtLinPed.setAnchoColumna(new int[]
                        {20,50, 160,  50,50,50,40, 50, 200, 30});
     jtLinPed.setAlinearColumna(new int[]
                          {1,2, 0,  2, 2,2,2, 2, 0, 2});
     jtLinPed.setFormatoColumna(5, "-,--9");
     jtLinPed.setFormatoColumna(7, "-,--9.99");
     jtLinPed.setAjustarGrid(true);
      cgpedven vg = new cgpedven(jtLinPed);
        for (int n = 0; n < jtLinPed.getColumnCount(); n++)
        {
            miCellRender mc = jtLinPed.getRenderer(n);
            if (mc == null)
                continue;
            mc.setVirtualGrid(vg);
            mc.setErrBackColor(Color.CYAN);
            mc.setErrForeColor(Color.BLACK);
        }
    }
   public int getLineasGrid()
   {
       return jtLinPed.getRowCount();
   }
   public String getUsuarioPedido()
   {
       return usu_nomcoE.getText();
   }
   public int getTiempoPedido()
   {
        return tit_tiempoE.getValorInt();
   }
   public String getComentarioPedido()
   {
       return pvc_comenE.getText();
   }
   public String getComentarioRuta()
   {
       return pvcComrep;
   }
   public Cgrid getGrid()
   {
       return jtLinPed;
   }
   /**
    * Ver datos de pedido de un albaran
    * @param ejeAlb
    * @param serAlb
    * @param numAlb
    * @throws SQLException 
    */
   boolean verDatPed(int empCodi,int ejeAlb,String serAlb,int numAlb) throws SQLException
   {
       String s="SELECT * FROM pedvenc where avc_ano="+ejeAlb+
           " and avc_serie='"+serAlb+"'"+
           " and avc_nume = "+numAlb+
           " and emp_codi = "+empCodi;
       if (!dtCon1.select(s))
           return false;
       pvcNume=dtCon1.getInt("pvc_nume");
       pvcAno=dtCon1.getInt("eje_nume");
       return verDatPed(empCodi,pvcAno,pvcNume,ejeAlb,serAlb,numAlb);
   }
   public int getNumeroPedido()
   {
       return pvcNume;
   }
   public int getEjercicioPedido()
   {
       return pvcAno;
   }
   boolean verDatPed(int empCodi,int pvcAno,int pvcNume,int ejeAlb,String serAlb,int numAlb) throws SQLException
   {
       boolean enabJT=jtLinPed.isEnabled();
       jtLinPed.setEnabled(false);
       resetTexto();
       if (pvcAno==0 || pvcNume==0)
       {
           jtLinPed.setEnabled(enabJT);
           return false; 
       }
       String s="SELECT p.*,cl.cli_pobl,tit_tiempo,usu_nomco,tt.usu_nomb as usu_pedido FROM v_pedven as p"
           + " left join v_tiempospedido as tt on  tit_id=p.pvc_id "
           + (titUsunom==null?"": " and tt.usu_nomb='"+titUsunom+"' ")
           + ",v_cliente as cl "+
           " WHERE p.emp_codi =  "+empCodi+
           " and p.cli_codi = cl.cli_codi "+ 
           " AND p.eje_nume = "+pvcAno+
           " and p.pvc_nume = "+pvcNume+
           " order by p.pvl_numlin ";
      
       
       if (! dtCon1.select(s))
       {
         padre.msgBox("NO ENCONTRADOS DATOS PARA ESTE PEDIDO");
         jtLinPed.setEnabled(enabJT);
         return false;
       }
       pvcDepos=dtCon1.getString("pvc_depos");
       int cliCodi=dtCon1.getInt("cli_codi");
       usu_nomcoE.setText(dtCon1.getString("usu_pedido",true));
       tit_tiempoE.setText(dtCon1.getString("tit_tiempo",true));
       String pvc_comen=dtCon1.getString("pvc_comen");
       usu_nombE.setText(dtCon1.getString("usu_nomb"));
       pvc_fecpedE.setText(dtCon1.getFecha("pvc_fecped"));
       pvc_horpedE.setText(dtCon1.getFecha("pvc_fecped","HH.mm"));
       pvc_fecpreE.setText(dtCon1.getFecha("pvc_fecpre","dd-MM-yy"));
       pvc_comenE.setText(pvc_comen);
       pvc_comenE.setCaretPosition(0);
       pvc_impresE.setSelecion(dtCon1.getString("pvc_impres"));
       pvcComrep=dtCon1.getString("pvc_comrep");
    
       do
       {
         ArrayList v=new ArrayList();
         v.add("P");
         v.add(dtCon1.getString("pro_codi"));
         v.add(proPanel.getNombreArtCli(dtCon1.getInt("pro_codi"),
                                              cliCodi,dtStat));
//         v.add(dtCon1.getString("prv_codi"));
//         v.add(prv_codiE.getNombPrv(dtCon1.getString("prv_codi"),dtStat));
//         v.add(dtCon1.getFecha("pvl_feccad"));
         v.add(dtCon1.getString("pvl_canti")+" "+dtCon1.getString("pvl_tipo"));
         v.add("");
         v.add("");
         v.add("");
         v.add(swVerPrecio?dtCon1.getString("pvl_precio"):"");
//         v.add(dtCon1.getInt("pvl_precon") != 0);
         v.add(dtCon1.getString("pvl_comen"));
         v.add(dtCon1.getString("pvl_numlin"));
         jtLinPed.addLinea(v);
       } while (dtCon1.next());
       if (ejeAlb!=0)    
           verDatAlbaranPed(empCodi,ejeAlb,serAlb,numAlb,cliCodi );
       jtLinPed.setEnabled(enabJT);
       return true;
   }
    
   void verDatAlbaranPed(int empCodi,int avcAno,String avcSerie, int avcNume,int cliCodi) throws SQLException
   {
      String s="select l.pro_codi,sum(avp_numuni) as avp_numuni,sum(avp_canti) as avp_canti " +
             (opIgnPrvE.isSelected()?"":", s.prv_codi")+
             (opIgnCadE.isSelected()?"":",s.stp_feccad ")+
             " from v_albvenpar as l,v_stkpart as s " +
             " WHERE s.eje_nume = l.avp_ejelot " +
             " and s.emp_codi = l.avp_emplot " +
             " and s.pro_serie = l.avp_serlot " +
             " and s.pro_nupar = l.avp_numpar " +
             " and s.pro_codi = l.pro_codi " +
             " and s.pro_numind = l.avp_numind " +
             " and l.emp_codi = "+empCodi+
             " and l.avc_ano = " + avcAno +
             " and l.avc_serie = '" +avcSerie + "'" +
             " and l.avc_nume = " + avcNume +
             " GROUP BY l.pro_codi  "+
            (opIgnPrvE.isSelected()?"":",s.prv_codi")
            + (opIgnCadE.isSelected()?"":", stp_feccad ")+
             " order by pro_codi ";

//    debug(s);
    if (! dtCon1.select(s))
      return;
    int rowCount=jtLinPed.getRowCount();     
    do
    {
      boolean swEnc=false;
      String proNomb=proPanel.getNombreArtCli(dtCon1.getInt("pro_codi"),
                                           cliCodi,  dtStat);
      if (proNomb==null)
      {
          Error("Error al ver detalle pedido",new SQLException("Arritulo "+dtCon1.getInt("pro_codi")+" No encontrado") );
          return;
      }
      if (!dtStat.getString("pro_tiplot").equals("V"))
          continue; // ignoro productos no vendibles
      boolean proEncaja=dtStat.getInt("pro_encaja")!=0;
      
      for (int n=0;n<rowCount;n++)
      {
        if (dtCon1.getInt("pro_codi")==jtLinPed.getValorInt(n,JT_PROCOD))
        {
            jtLinPed.setValor(getUnidPrepar(proEncaja,jtLinPed.getValString(n,JT_CANPED)),n,JT_CANPRE);          
            jtLinPed.setValor(dtCon1.getDouble("avp_canti"),n,JT_KGPRE);     
            jtLinPed.setValor(dtCon1.getInt("avp_numuni"),n,JT_NUMIND);     
            swEnc=true;
            break;
        }
      }
      if (swEnc)
          continue;
      ArrayList v=new ArrayList();
      v.add("A");
      v.add(dtCon1.getString("pro_codi"));
      v.add(proNomb);
      v.add("");// Cantidad pedida
      v.add(getUnidPrepar(proEncaja,"?")); // Cant. Preparada
      v.add(dtCon1.getDouble("avp_canti")); // Kg. preparados
      v.add(dtCon1.getInt("avp_numuni")); // Numero Unidades
      v.add(""); // Precio
      v.add(""); // 7 Comentario
      v.add(""); // NL  
      jtLinPed.addLinea(v);
    } while (dtCon1.next());
    
   }
   /**
    * Devuelve las unidades / Cajas 
    * @param proEncaja
    * @param tipoPed
    * @return
    * @throws SQLException 
    */
   String getUnidPrepar(boolean proEncaja,String tipoPed) throws SQLException
   {
       
       if (!proEncaja)
           return dtCon1.getInt("avp_numuni") + " P";
       String unidPed=tipoPed.substring(tipoPed.length()-1);
       
       if (unidPed.equals("?"))
           unidPed=(dtCon1.getDouble("avp_canti") / dtStat.getDouble("pro_kguni") > 8)?"C":"P";
     
       if  ( unidPed.equals("P") || unidPed.equals("K") )
       {
           return Formatear.redondea(dtCon1.getDouble("avp_canti") / dtStat.getDouble("pro_kguni"), 0)
               + " P";
       }
       else
           return Formatear.redondea(dtCon1.getDouble("avp_canti") / dtStat.getDouble("pro_kgcaj"), 0)
               + " C";
   }
    /**
     * Ignorar Proveedor ?
     * @return 
     */
    public boolean getIgnorarProveedor()
    {
        return opIgnPrvE.isSelected();
    }
    /**
     * Ignorar fecha Caducidad?
     * @return 
     */
    public boolean getIgnorarFechaCad()
    {
        return opIgnCadE.isSelected();
    }
    
    public void setUsuario(String titUsunom)
    {
        this.titUsunom=titUsunom;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private gnu.chu.controles.CPanel PPie;
    private gnu.chu.controles.CLabel cLabel17;
    private gnu.chu.controles.CLabel cLabel23;
    private gnu.chu.controles.CLabel cLabel24;
    private gnu.chu.controles.CLabel cLabel25;
    private gnu.chu.controles.CLabel cLabel26;
    private gnu.chu.controles.CLabel cLabel27;
    private gnu.chu.controles.CLabel cLabel28;
    private gnu.chu.controles.CLabel cLabel29;
    private gnu.chu.controles.Cgrid jtLinPed;
    private gnu.chu.controles.CTextField nPedT;
    private gnu.chu.controles.CCheckBox opIgnCadE;
    private gnu.chu.controles.CCheckBox opIgnPrvE;
    private gnu.chu.camposdb.prvPanel prv_codiE;
    private gnu.chu.controles.CTextArea pvc_comenE;
    private gnu.chu.controles.CTextField pvc_feccadE;
    private gnu.chu.controles.CTextField pvc_fecpedE;
    private gnu.chu.controles.CTextField pvc_fecpreE;
    private gnu.chu.controles.CTextField pvc_horpedE;
    private gnu.chu.controles.CCheckBox pvc_impresE;
    private javax.swing.JScrollPane scrollarea1;
    private gnu.chu.controles.CTextField tit_tiempoE;
    private gnu.chu.controles.CTextField usu_nombE;
    private gnu.chu.controles.CTextField usu_nomcoE;
    // End of variables declaration//GEN-END:variables

    private void Error(String error, Exception k) {
        padre.Error(error,k);
    }
}
