package gnu.chu.anjelica.almacen;
/**
 * <p>Titulo: CheckStock </p>
 * <p>Descripcion: Comprueba si un inividuo tiene stock. Si no tiene explica la razón, 
 * dando posiblidad de crear stock
 * </p>
 * <p>Copyright: Copyright (c) 2005-2018</p>
 *
 *  Este programa es software libre. Puede redistribuirlo y/o modificarlo bajo
 *  los términos de la Licencia Publica General de GNU según es publicada por
 *  la Free Software Foundation, bien de la versión 2 de dicha Licencia
 *  o bien (según su elección) de cualquier versión posterior.
 *  Este programa se distribuye con la esperanza de que sea útil,
 *  pero SIN NINGUNA GARANTÍA, incluso sin la garantía MERCANTIL implícita
 *  o sin garantizar la CONVENIENCIA PARA UN PROPÓSITO PARTICULAR.
 *  Véase la Licencia Pública General de GNU para más detalles.
 *  Debería haber recibido una copia de la Licencia Pública General junto con este programa.
 *  Si no ha sido así, escriba a la Free Software Foundation, Inc.,
 *  en 675 Mass Ave, Cambridge, MA 02139, EEUU.
 * @author chuchiP
 * @version 1.1
 */
import gnu.chu.Menu.Principal;
import gnu.chu.controles.CLabel;
import gnu.chu.controles.CPanel;
import gnu.chu.controles.CPasswordField;
import gnu.chu.controles.StatusBar;
import gnu.chu.interfaces.ejecutable;
import gnu.chu.sql.conexion;
import gnu.chu.utilidades.EntornoUsuario;
import gnu.chu.utilidades.Formatear;
import gnu.chu.utilidades.Iconos;
import gnu.chu.utilidades.mensajes;
import gnu.chu.utilidades.ventana;
import gnu.chu.winayu.ayuLote;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.beans.PropertyVetoException;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.Types;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

public class CheckStock extends ventana
{
  private ayuLote ayuLot = null;
  
  public CheckStock(EntornoUsuario eu, Principal p) {
        EU = eu;
        vl = p.panel1;
        jf = p;
        eje = true;

        setTitulo("Comprobar Stock Individuo");
        try {
            if (jf.gestor.apuntar(this)) {
                jbInit();
            } else {
                setErrorInit(true);
            }
        } catch (Exception e) {
          ErrorInit(e);
        }
    }

    public CheckStock(gnu.chu.anjelica.menu p, EntornoUsuario eu) {

        EU = eu;
        vl = p.getLayeredPane();
        setTitulo("Comprobar Stock Individuo");
        eje = false;

        try {
            jbInit();
        } catch (Exception e) {
           ErrorInit(e);
        }
    }
  private void jbInit() throws Exception {

        iniciarFrame();

        this.setVersion("2018-01-20");
        statusBar = new StatusBar(this);
        this.getContentPane().add(statusBar, BorderLayout.SOUTH);
        conecta();

        initComponents();
        this.setSize(new Dimension(530, 330));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cPanel1 = new gnu.chu.controles.CPanel();
        Pprinc = new gnu.chu.controles.CPanel();
        Pcabe = new gnu.chu.controles.CPanel();
        cLabel9 = new gnu.chu.controles.CLabel();
        pro_codiE = new gnu.chu.camposdb.proPanel()
        {
            @Override
            protected void despuesLlenaCampos()
            {
                BConsultar.doClick();
            }
        }
        ;
        pro_ejercE = new gnu.chu.controles.CTextField(Types.DECIMAL,"###9");
        cLabel7 = new gnu.chu.controles.CLabel();
        pro_serieE = new gnu.chu.controles.CTextField(Types.CHAR,"X",1);
        cLabel8 = new gnu.chu.controles.CLabel();
        pro_loteE = new gnu.chu.controles.CTextField(Types.DECIMAL,"####9");
        pro_numindE = new gnu.chu.controles.CTextField(Types.DECIMAL,"####9");
        cLabel4 = new gnu.chu.controles.CLabel();
        cLabel10 = new gnu.chu.controles.CLabel();
        Bindi = new gnu.chu.controles.CButton();
        cLabel12 = new gnu.chu.controles.CLabel();
        alm_codiE = new gnu.chu.controles.CLinkBox();
        BConsultar = new gnu.chu.controles.CButton(Iconos.getImageIcon("check"));
        cLabel6 = new gnu.chu.controles.CLabel();
        pro_kilosE = new gnu.chu.controles.CTextField(Types.DECIMAL, "--,--9.99");
        jScrollPane1 = new javax.swing.JScrollPane();
        explicaE = new gnu.chu.controles.CTextArea();
        PPie = new gnu.chu.controles.CPanel();
        cLabel3 = new gnu.chu.controles.CLabel();
        stp_unactE = new gnu.chu.controles.CTextField(Types.DECIMAL, "##9");
        cLabel5 = new gnu.chu.controles.CLabel();
        stp_kilactE = new gnu.chu.controles.CTextField(Types.DECIMAL, "--,--9.99");
        Bcrear = new gnu.chu.controles.CButton();
        Bcancelar = new gnu.chu.controles.CButton(Iconos.getImageIcon("cancel"));

        javax.swing.GroupLayout cPanel1Layout = new javax.swing.GroupLayout(cPanel1);
        cPanel1.setLayout(cPanel1Layout);
        cPanel1Layout.setHorizontalGroup(
            cPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        cPanel1Layout.setVerticalGroup(
            cPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        Pprinc.setLayout(null);

        Pcabe.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Pcabe.setLayout(null);

        cLabel9.setText("Producto");
        Pcabe.add(cLabel9);
        cLabel9.setBounds(10, 0, 60, 17);
        Pcabe.add(pro_codiE);
        pro_codiE.setBounds(70, 0, 440, 17);
        Pcabe.add(pro_ejercE);
        pro_ejercE.setBounds(40, 20, 40, 17);

        cLabel7.setText("Serie");
        Pcabe.add(cLabel7);
        cLabel7.setBounds(90, 20, 40, 17);

        pro_serieE.setAutoNext(true);
        pro_serieE.setMayusc(true);
        Pcabe.add(pro_serieE);
        pro_serieE.setBounds(130, 20, 20, 17);

        cLabel8.setText("Lote");
        Pcabe.add(cLabel8);
        cLabel8.setBounds(160, 20, 30, 17);
        Pcabe.add(pro_loteE);
        pro_loteE.setBounds(190, 20, 40, 17);
        Pcabe.add(pro_numindE);
        pro_numindE.setBounds(270, 20, 40, 17);

        cLabel4.setText("Ind");
        Pcabe.add(cLabel4);
        cLabel4.setBounds(240, 20, 25, 17);

        cLabel10.setText("Almacen ");
        Pcabe.add(cLabel10);
        cLabel10.setBounds(10, 40, 60, 15);
        Pcabe.add(Bindi);
        Bindi.setBounds(420, 30, 2, 2);

        cLabel12.setText("Ejerc");
        Pcabe.add(cLabel12);
        cLabel12.setBounds(10, 20, 30, 17);

        alm_codiE.setAncTexto(30);
        alm_codiE.setFormato(true);
        alm_codiE.setFormato(Types.DECIMAL, "#9", 2);
        alm_codiE.combo.setPreferredSize(new Dimension(200,17));
        Pcabe.add(alm_codiE);
        alm_codiE.setBounds(70, 40, 230, 17);

        BConsultar.setText("Consultar");
        Pcabe.add(BConsultar);
        BConsultar.setBounds(320, 40, 100, 30);

        cLabel6.setText("Kilos");
        Pcabe.add(cLabel6);
        cLabel6.setBounds(320, 20, 30, 17);

        pro_kilosE.setEditable(false);
        Pcabe.add(pro_kilosE);
        pro_kilosE.setBounds(360, 20, 50, 17);

        Pprinc.add(Pcabe);
        Pcabe.setBounds(0, 0, 580, 80);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        explicaE.setColumns(20);
        explicaE.setRows(5);
        jScrollPane1.setViewportView(explicaE);

        Pprinc.add(jScrollPane1);
        jScrollPane1.setBounds(0, 80, 580, 100);

        PPie.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        PPie.setLayout(null);

        cLabel3.setText("Unidades");
        PPie.add(cLabel3);
        cLabel3.setBounds(10, 2, 60, 17);

        stp_unactE.setEditable(false);
        stp_unactE.setText("1");
        PPie.add(stp_unactE);
        stp_unactE.setBounds(70, 2, 30, 17);

        cLabel5.setText("Kilos");
        PPie.add(cLabel5);
        cLabel5.setBounds(110, 2, 30, 17);
        PPie.add(stp_kilactE);
        stp_kilactE.setBounds(150, 2, 50, 17);

        Bcrear.setText("Crear Stock");
        PPie.add(Bcrear);
        Bcrear.setBounds(220, 2, 110, 24);
        PPie.add(Bcancelar);
        Bcancelar.setBounds(370, 2, 45, 20);

        Pprinc.add(PPie);
        PPie.setBounds(80, 190, 430, 30);

        getContentPane().add(Pprinc, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private gnu.chu.controles.CButton BConsultar;
    private gnu.chu.controles.CButton Bcancelar;
    private gnu.chu.controles.CButton Bcrear;
    private gnu.chu.controles.CButton Bindi;
    private gnu.chu.controles.CPanel PPie;
    private gnu.chu.controles.CPanel Pcabe;
    private gnu.chu.controles.CPanel Pprinc;
    private gnu.chu.controles.CLinkBox alm_codiE;
    private gnu.chu.controles.CLabel cLabel10;
    private gnu.chu.controles.CLabel cLabel12;
    private gnu.chu.controles.CLabel cLabel3;
    private gnu.chu.controles.CLabel cLabel4;
    private gnu.chu.controles.CLabel cLabel5;
    private gnu.chu.controles.CLabel cLabel6;
    private gnu.chu.controles.CLabel cLabel7;
    private gnu.chu.controles.CLabel cLabel8;
    private gnu.chu.controles.CLabel cLabel9;
    private gnu.chu.controles.CPanel cPanel1;
    private gnu.chu.controles.CTextArea explicaE;
    private javax.swing.JScrollPane jScrollPane1;
    private gnu.chu.camposdb.proPanel pro_codiE;
    private gnu.chu.controles.CTextField pro_ejercE;
    private gnu.chu.controles.CTextField pro_kilosE;
    private gnu.chu.controles.CTextField pro_loteE;
    private gnu.chu.controles.CTextField pro_numindE;
    private gnu.chu.controles.CTextField pro_serieE;
    private gnu.chu.controles.CTextField stp_kilactE;
    private gnu.chu.controles.CTextField stp_unactE;
    // End of variables declaration//GEN-END:variables
 
    @Override
    public void iniciarVentana() throws Exception {      
        Pcabe.setDefButton(BConsultar);
        pro_codiE.iniciar(dtStat, this, vl, EU);
        pro_codiE.setCamposLote(pro_ejercE, pro_serieE, pro_loteE, pro_numindE, pro_kilosE);
        pdalmace.llenaLinkBox(alm_codiE, dtStat, '*');
        alm_codiE.setValorInt(1);
        pro_ejercE.setText("" + EU.ejercicio);
        pro_serieE.setText("A");
        PPie.setEnabled(false);
        activarEventos();
        pro_codiE.requestFocusLater();
    }
    public void setProducto(int proCodi)
    {
        pro_codiE.setValorInt(proCodi);        
    }
    public void setLote(int lote)
    {
        pro_loteE.setValorInt(lote);
    }
    public void setIndividuo(int indiv)
    {
        pro_numindE.setValorInt(indiv);
    }
    public void setSerie(String serie)
    {
        pro_serieE.setText(serie);
    }
     public void setEjercicio(int ejerc)
    {
        pro_ejercE.setValorInt(ejerc);
    }
    public void consultar()
    {
        if (!checkIndividuo())
            return;
        Pcabe.setEnabled(false);
        PPie.setEnabled(true);
        stp_unactE.requestFocusLater();

    }
    public static String getNombreClase()
   {        
     return "gnu.chu.anjelica.almacen.CheckStock";
   }
      
   /**
    * Invoca este programa desde fuera, para realizar una consulta rapida
    * @param jf
    * @param proCodi
    * @param ejeNume
    * @param serie
    * @param lote
    * @param indiv 
    */
   public static void ir(Principal jf,int proCodi,int ejeNume,String serie,int lote,int indiv )
   {
     if (jf==null)
         return;
     ejecutable prog;
     if ((prog = jf.gestor.getProceso(CheckStock.getNombreClase())) == null)
        return;
    gnu.chu.anjelica.almacen.CheckStock cm = (gnu.chu.anjelica.almacen.CheckStock) prog;

    cm.setProducto(proCodi);
    cm.setLote(lote);
    cm.setIndividuo(indiv);
    cm.setSerie(serie);
    cm.setEjercicio(ejeNume);
    cm.consultar();
    jf.gestor.ir(cm);
  }
    void activarEventos()
    {
        pro_ejercE.addKeyListener(new KeyAdapter()
        {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_F3)
                    ayudaLote();
            }
        });
        pro_serieE.addKeyListener(new KeyAdapter()
        {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_F3)
                    ayudaLote();
            }
        });
        pro_numindE.addKeyListener(new KeyAdapter()
        {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_F3)
                    ayudaLote();
            }
        });
        pro_loteE.addKeyListener(new KeyAdapter()
        {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_F3)
                    ayudaLote();
            }
        });
        Bcancelar.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e) {               
                Pcabe.setEnabled(true);
                PPie.setEnabled(false);
                pro_codiE.requestFocusLater();
            }
        });
        BConsultar.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e) {
                consultar();
            }
        });
        Bcrear.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e) {
                crearStock();
            }
        });
    }
    
    void crearStock()
    {
      try
      {
          if (stp_kilactE.getValorDec()==pro_kilosE.getValorDec() )
          {
              msgBox("Este individuo ya tiene este stock disponible. NO SE HARA NADA");
              return;
          }
          if (!validarPass())
              return;
          String edAdd="";
          String s = "select stp_kilact,stp_unact,stp_numcaj,stp_numpal from stockpart WHERE  alm_codi = " + alm_codiE.getValorInt() +
              " and eje_nume = " + pro_ejercE.getValorInt() +
              " and pro_Serie = '" + pro_serieE.getText() + "'" +
              " and pro_nupar = " + pro_loteE.getValorInt() +
              " and pro_numind = " + pro_numindE.getValorInt() +
              " and pro_codi = " + pro_codiE.getValorInt();
       
          if (!dtCon1.select(s,true))
          {
              dtCon1.addNew("stockpart",false);
              edAdd="ADDNEW";
              dtCon1.setDato("eje_nume",pro_ejercE.getValorInt());
              dtCon1.setDato("emp_codi",EU.em_cod);
              dtCon1.setDato("pro_serie",pro_serieE.getText());
              dtCon1.setDato("stp_tiplot","P");
              dtCon1.setDato("pro_nupar",pro_loteE.getValorInt());

        dtCon1.setDato("pro_codi",pro_codiE.getValorInt());
        dtCon1.setDato("pro_numind",pro_numindE.getValorInt() );
        dtCon1.setDato("alm_codi",alm_codiE.getValorInt() );
        dtCon1.setDato("stp_unini",stp_unactE.getValorDec() );
        dtCon1.setDato("stp_feccre","current_timestamp");
        dtCon1.setDato("stp_fefici",(Date) null);
        dtCon1.setDato("stp_kilini",stp_kilactE.getValorDec());
        dtCon1.setDato("stp_kilact",stp_kilactE.getValorDec());
        dtCon1.setDato("stp_numpal","");
        dtCon1.setDato("stp_numcaj",0);
          }
          else
          {
              edAdd="EDIT";
              dtCon1.edit(dtCon1.getCondWhere());
          }
          dtCon1.setDato("stp_kilact",stp_kilactE.getValorDec());
          dtCon1.setDato("stp_unact",stp_unactE.getValorDec() );
          dtCon1.setDato("stp_numpal","");
          dtCon1.setDato("stp_numcaj",0);
          dtCon1.update(stUp);
          ctUp.commit();
          msgBox("Inventario ... Generado");
          Bcancelar.doClick();
          if (jf != null)
          {
              jf.ht.clear();
              jf.ht.put("%u", EU.usuario);
              jf.ht.put("%p", pro_codiE.getText());
              jf.ht.put("%U", Formatear.format(stp_unactE.getText(), "---9"));
              jf.ht.put("%k", Formatear.format(stp_kilactE.getText(), "---9.99"));
              jf.ht.put("%l", EU.em_cod + "-" +
                  pro_ejercE.getValorInt() + "/" +
                  pro_serieE.getText() + "-" +
                  pro_loteE.getValorInt()+"-"+pro_numindE.getValorInt());
              jf.guardaMens("CS", jf.ht);
          }} catch (SQLException ex)
      {
          Logger.getLogger(CheckStock.class.getName()).log(Level.SEVERE, null, ex);
      }
   }
   boolean validarPass()
   {
       String pass;
       conexion ct;
       CPanel panel = new CPanel();
       panel.setLayout(new BorderLayout());
       CLabel label = new CLabel("Introduzca contraseña :");
       CPasswordField pf = new CPasswordField(10);
       panel.add(label, BorderLayout.NORTH);
       panel.add(pf, BorderLayout.SOUTH);
       pf.requestFocus();
       int okCxl = JOptionPane.showConfirmDialog(null, panel,EU.usu_nomb+" Confirme Creacion Stock", JOptionPane.OK_CANCEL_OPTION,
           JOptionPane.PLAIN_MESSAGE);
       if (okCxl == JOptionPane.OK_OPTION)
           pass = new String(pf.getPassword());
       else
           return false;
       try
       {
           int passNum = Integer.parseInt(pass.trim());
           if (passNum == EU.getClaveUsuario(dtStat))
               return true;
       } catch (NumberFormatException | SQLException k2)
       {
       }
       EntornoUsuario eu = (EntornoUsuario) EU.clone();
       eu.password = pass;
       try
       {
           ct = new conexion(eu);
       } catch (SQLException | ClassNotFoundException | IllegalAccessException | InstantiationException k)
       {
           mensajes.mensajeUrgente("Contraseña de usuario NO valida");       
           return false;
       }

       try
       {
           if (ct.isConectado() )
               ct.close();
       } catch (Exception k)
       {
       }
       return true;
   }
   /**
   * Consulta Lotes Disponibles de Productos.
   */
  public void ayudaLote()
  {
    try
    {
      if (ayuLot == null)
      {
        ayuLot = new ayuLote(EU, vl, dtCon1, pro_codiE.getValorInt())
        {
          @Override
            public void matar(boolean cerrarConexion)
           {
            ayuLot.setVisible(false);
            ej_consLote();
           }
        };
        this.getLayeredPane().add(ayuLot,1);
//        vl.add(ayuLot);
        ayuLot.setIconifiable(false);
        ayuLot.setLocation(25, 25);
        ayuLot.iniciarVentana();
      }
      ayuLot.jt.removeAllDatos();
      ayuLot.setVisible(true);
      ayuLot.muerto = false;
      ayuLot.statusBar.setEnabled(true);
      ayuLot.statusBar.Bsalir.setEnabled(true);


      this.setEnabled(false);
      this.setFoco(ayuLot);
      ayuLot.cargaGrid(pro_codiE.getText(),alm_codiE.getValorInt());
      SwingUtilities.invokeLater(new Thread()
      {
        @Override
        public void run()
        {
          ayuLot.jt.requestFocusInicio();
        }
      });

    }
    catch (Exception j)
    {
      this.setEnabled(true);
    }
  }

  void ej_consLote()
  {
    if (ayuLot.consulta)
    {
      pro_ejercE.setValorDec(ayuLot.jt.getValorInt(ayuLot.rowAct, ayuLote.JT_EJE));
      pro_serieE.setText(ayuLot.jt.getValString(ayuLot.rowAct, ayuLote.JT_SER));
      pro_loteE.setValorDec(ayuLot.jt.getValorInt(ayuLot.rowAct, ayuLote.JT_LOTE));
      pro_numindE.setValorDec(ayuLot.jt.getValorInt(ayuLot.rowAct, ayuLote.JT_IND));
      pro_kilosE.setText(ayuLot.jt.getValString(ayuLot.rowAct, ayuLote.JT_PESO ));
// 
    }
    ayuLot.setVisible(false);
    this.setEnabled(true);
    this.toFront();
    try
    {
      this.setSelected(true);
    }
    catch (PropertyVetoException k)
    {}
    this.setFoco(null);
    stp_kilactE.requestFocusLater();
    
   }
  boolean checkIndividuo() 
  {
      try {
        if (!pro_codiE.controlar())
        {
          mensajeErr(pro_codiE.getMsgError());
          return false;
        }    
        if (pro_ejercE.getValorInt() == 0)
        {
          mensajeErr("Introduzca Ejercicio de Lote");
          pro_ejercE.requestFocus();
          return false;
        }
  //      if (deo_emplotE.getValorInt() == 0)
  //      {
  //        mensajeErr("Introduzca Empresa de Lote");
  //        deo_emplotE.requestFocus();
  //        return;
  //      }
        if (pro_serieE.getText().trim().equals(""))
        {
          mensajeErr("Introduzca Serie de Lote");
          pro_serieE.requestFocus();
          return false;
        }
        if (pro_loteE.getValorInt() == 0)
        {
          mensajeErr("Introduzca N.de Lote");
          pro_loteE.requestFocus();
         return false;
        }
        
        if (!ActualStkPart.checkIndiv(dtStat, pro_codiE.getValorInt(), pro_ejercE.getValorInt() ,0,
            pro_serieE.getText(), pro_loteE.getValorInt(), pro_numindE.getValorInt(),alm_codiE.getValorInt(),false))
        {
             explicaE.setText("*SIN STOCK*\nRegistro NO encontrado en Stock-Partidas");
             return true;
        }
        pro_kilosE.setValorDec(dtStat.getDouble("stp_kilact"));
        stp_unactE.setValorInt(dtStat.getInt("stp_unact"));
        stp_kilactE.setValorDec(dtStat.getDouble("stp_kilact"));
        if (stp_kilactE.getValorDec() > 0 && stp_unactE.getValorInt()==1)
        {
            explicaE.setText("*CON STOCK*\nINDIVIDUO CON 1 UNIDAD de PESO "+stp_kilactE.getValorDec()+" KG de stock\n**PARECE TODO CORRECTO**"); 
            return true;
        }
        stp_unactE.setValorInt(dtStat.getInt("stp_unini"));
        stp_kilactE.setValorDec(dtStat.getDouble("stp_kilini"));
        String s="select * from mvtosalm where pro_ejelot="+pro_ejercE.getValorInt()+
                " and pro_serlot='"+pro_serieE.getText()+"'"+
                " and pro_numlot = "+pro_loteE.getValorInt()+
                " and pro_indlot="+pro_numindE.getValorInt()+
                " order by mvt_time desc";
        if (dtCon1.select(s))
        { 
            if (dtCon1.getString("mvt_tipdoc").equals("V"))
            {
                s="select a.*,cl.cli_nomb,cl.cli_pobl from v_albventa as a,v_cliente as cl where avc_ano = "+dtCon1.getInt("mvt_ejedoc")+
                    " and avc_nume ="+dtCon1.getInt("mvt_numdoc")+
                    " and avc_serie = '"+dtCon1.getString("mvt_serdoc")+"'"+
                    " and a.emp_codi = "+dtCon1.getInt("mvt_empcod")+
                    " and a.cli_codi = cl.cli_codi";
                if (dtStat.select(s))    
                {
                   explicaE.setText("*SIN STOCK*\nINDIVIDUO SE VENDIO A: "+dtStat.getString("cli_nomb")+" ("+dtStat.getString("cli_pobl")+")"+
                       "\n EL DIA: "+dtStat.getFecha("avc_fecalb","dd-MM-yy")+
                       "\n KILOS VENDIDOS: "+Formatear.format(dtCon1.getDouble("mvt_canti"),"--,--9.99")+
                       "\n Albaran: "+ dtCon1.getInt("mvt_ejedoc")+dtCon1.getString("mvt_serdoc")+dtCon1.getInt("mvt_numdoc")); 
                   return true;
                }
                else
                {
                 explicaE.setText("*SIN STOCK*\nERROR INTERNO DEL PROGRAMA. \n"
                     + "ESTE INDIVIDUO APARECE COMO VENDIDO EN ALBARAN: "+
                     dtCon1.getInt("mvt_ejedoc")+dtCon1.getInt("mvt_serdoc")+
                     ""+dtCon1.getInt("mvt_numdoc")+" EN FECHA: "+dtCon1.getFecha("mvt_time","dd-MM-yy hh:MM" )+
                     "\n KILOS : "+Formatear.format(dtCon1.getDouble("mvt_canti"),"--,--9.99")+
                    " PERO NO SE ENCUENTRA EL ALBARAN");
                 return true;
                }
            }
            if (dtCon1.getString("mvt_tipdoc").equals("D"))
            {
                s="select * from v_despori where eje_nume = "+dtCon1.getInt("mvt_ejedoc")+
                    " and deo_codi ="+dtCon1.getInt("mvt_numdoc");
                    if (dtStat.select(s))    
                {
                   explicaE.setText("*SIN STOCK*\nINDIVIDUO SE DESPIEZO EL: "+dtStat.getFecha("deo_fecha","dd-MM-yy")+
                       "\n KILOS : "+Formatear.format(dtCon1.getDouble("mvt_canti"),"--,--9.99")+
                       "\n En despiece: "+dtCon1.getInt("mvt_ejedoc")+"-"+dtCon1.getInt("mvt_numdoc")); 
                   return true;
                }
                else
                {
                 explicaE.setText("*SIN STOCK*\nERROR INTERNO DEL PROGRAMA. \n"
                     + "ESTE INDIVIDUO APARECE COMO DESPIEZADO EN DESPIECE : "+
                     dtCon1.getInt("mvt_ejedoc")+"-"+dtCon1.getInt("mvt_numdoc")+
                     "\n KILOS : "+Formatear.format(dtCon1.getDouble("mvt_canti"),"--,--9.99")+
                     "\n EN FECHA: "+dtCon1.getFecha("mvt_time","dd-MM-yy hh:MM" )+
                    " PERO NO SE ENCUENTRA EL DESPIECE");
                 return true;
                }
            }
            if (dtCon1.getString("mvt_tipdoc").equals("R"))
            {
                s="select * from v_regstock where rgs_nume ="+dtCon1.getInt("mvt_numdoc");
                if (dtStat.select(s))    
                {
                   explicaE.setText("*SIN STOCK*\nINDIVIDUO SE REGULARIZO EL: "+dtStat.getFecha("rgs_fecha","dd-MM-yy hh:MM")+
                       "\n En Regularizción: "+dtCon1.getInt("mvt_numdoc")+
                       "\n KILOS : "+Formatear.format(dtCon1.getDouble("mvt_canti"),"--,--9.99")+
                       "\n Tipo Regularización: "+dtStat.getString("tir_nomb")); 
                   return true;
                }
                else
                {
                 explicaE.setText("*SIN STOCK*\nERROR INTERNO DEL PROGRAMA. \n"
                     + "ESTE INDIVIDUO APARECE COMO REGULARIZADO CON NUM. REGULARIZACION : "+
                     dtCon1.getInt("mvt_numdoc")+
                     "\n KILOS : "+Formatear.format(dtCon1.getDouble("mvt_canti"),"--,--9.99")+
                     "\nEN FECHA: "+dtCon1.getFecha("mvt_time","dd-MM-yy hh:MM" )+
                    " PERO NO SE ENCUENTRA LA REGULARIZACIÓN");
                 return true;
                }
            }
            explicaE.setText("*SIN STOCK*\n*ERROR* NO PUEDO IDENTIFICAR ESTE MOVIMIENTO\n"
                     + "ESTE INDIVIDUO TIENE EL ULTIMO MVTO EL: "+dtCon1.getFecha("mvt_time","dd-MM-yy hh:MM" )
                +"\nTIPO DOCUMENTO: "+dtCon1.getString("mvt_tipdoc")+
                "\n KILOS : "+Formatear.format(dtCon1.getDouble("mvt_canti"),"--,--9.99")+
                "\nTIPO MVTO: "+dtCon1.getString("mvt_tipo"));
            return true;                
        }
        else
        {
            explicaE.setText("*SIN STOCK*\nNO ENCONTRADO NINGUN MOVIMIENTO\n "
                + "PROBABLEMENTE SE QUITO EL STOCK MANUALMENTE \n "
                + "O HUBO UN ERROR DEL SISTEMA"); 
        }      
      } catch (SQLException k)
      {
          Error("Error al chequear individuo",k);
          return false;
      }
      return true;
  }
}
