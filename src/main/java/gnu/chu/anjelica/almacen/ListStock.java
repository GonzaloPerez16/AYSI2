
package gnu.chu.anjelica.almacen;
/**
 *
 * <p>Título: ListStock</p>
 * <p>Descripción: Ventana para mostrar registros de los listados de stock anteriores.
 * Usada por CLUbicArt.
 *  </p>
 * <p>Copyright: Copyright (c) 2005-2015
 *  Este programa es software libre. Puede redistribuirlo y/o modificarlo bajo
 *  los términos de la Licencia Pública General de GNU segun es publicada por
 *  la Free Software Foundation, bien de la versión 2 de dicha Licencia
 *  o bien (según su elección) de cualquier versión posterior.
 *  Este programa se distribuye con la esperanza de que sea útil,
 *  pero SIN NINGUNA GARANTIA, incluso sin la garantía MERCANTIL implícita
 *  o sin garantizar la CONVENIENCIA PARA UN PROPOSITO PARTICULAR.
 *  Véase la Licencia Pública General de GNU para más detalles.
 *  Debería haber recibido una copia de la Licencia Pública General junto con este programa.
 *  Si no ha sido así, escriba a la Free Software Foundation, Inc.,
 *  en 675 Mass Ave, Cambridge, MA 02139, EEUU.
 * </p>
 * <p>Empresa: miSL</p>
 * @author chuchi P
 *
 */
import gnu.chu.controles.StatusBar;
import gnu.chu.sql.DatosTabla;
import gnu.chu.utilidades.ventana;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.beans.PropertyVetoException;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;


public class ListStock extends ventana
{
    ventana papa;
    private Timestamp hlsFecstk=null;
    private int almCodi;
    /**
     * Creates new form ListStock
     * @param padre
     */
    public ListStock(ventana padre) {
         papa=padre;
         this.setTitle("Listados de Stocks");

        this.setVersion("2014-11-25");
        statusBar = new StatusBar(this);

        this.setPreferredSize(new Dimension(450, 302));
        this.setSize(new Dimension(450, 302));
        this.getContentPane().add(statusBar, BorderLayout.SOUTH);
        
        setVisibleCabeceraVentana(false);
        initComponents();
        activarEventos();        
    }
    
    protected void activarEventos()
    {
        jt.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mouseClicked(MouseEvent e) {
                try
                {
                    if (jt.isVacio() || e.getClickCount()<2 )
                        return;
                    hlsFecstk=new Timestamp(jt.getValDate(jt.getSelectedRow(), 0, "dd-MM-yyyy HH:mm:ss").getTime());
                    almCodi=jt.getValorInt(jt.getSelectedRow(), 1);
                    matar();
                } catch (ParseException ex)
                {
                    Logger.getLogger(ListStock.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    public int getAlmacen()
    {
        return almCodi;
    }
    public Timestamp getFechaHist()
    {
        return hlsFecstk;
    }
    public void resetFechaHist()
    {
         hlsFecstk=null;
    }
    public void iniciar(DatosTabla dt,int almCodi) throws SQLException
    {
        hlsFecstk=null;
        String s="Select hls_fecstk,h.alm_codi,alm_nomb  from hislisstk as h left join v_almacen on h.alm_codi = v_almacen.alm_codi"
            + " where hls_fecstk > current_Date -90"
            + (almCodi==0?"": " and h.alm_codi = "+almCodi)
            + " group by hls_fecstk,h.alm_codi,alm_nomb "
            + " order by h.hls_fecstk,alm_codi ";
        if (!dt.select(s))
        {
            msgBox("NO encontrado registros de historicos de listados");
            matar();
            return;
        }
        jt.setEnabled(false);
        jt.removeAllDatos();
        do
        {          
            ArrayList v=new ArrayList();
            v.add(dt.getFecha("hls_fecstk","dd-MM-yyyy HH:mm:ss")); // 0
            v.add(dt.getInt("alm_codi")); // 1
            v.add(dt.getString("alm_nomb")); //2
            jt.addLinea(v);
        } while (dt.next());
        jt.requestFocusInicio();
        jt.setEnabled(true);
        mensajeErr("Historico de listados... mostrados");
    }
    
    @Override
    public void matar()
    {
      setVisible(false);

      papa.setEnabled(true);
      papa.setFoco(null);
      try {
          papa.setSelected(true);
      } catch (PropertyVetoException k){}
      matado();
    }  
    /**
     * Funcion a machacar para saber cuando se ha matado la ventana.
     */
    public void matado()
    {
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jt = new gnu.chu.controles.Cgrid(3);

        jt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jt.setMaximumSize(new java.awt.Dimension(539, 239));
        jt.setMinimumSize(new java.awt.Dimension(539, 239));
        ArrayList v1=new ArrayList();
        v1.add("Fecha"); // 0
        v1.add("Alm"); // 1
        v1.add("Nombre Alm"); // 3
        jt.setCabecera(v1);
        jt.setAnchoColumna(new int[]    {100,70,200});
        jt.setAlinearColumna(new int[] {0,2,0});
        jt.setAjustarGrid(true);
        getContentPane().add(jt, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private gnu.chu.controles.Cgrid jt;
    // End of variables declaration//GEN-END:variables
}
